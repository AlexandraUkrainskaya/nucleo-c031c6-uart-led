
nucleo-c031c6-breadboard-leds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e8c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08001f4c  08001f4c  00002f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002008  08002008  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002008  08002008  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002008  08002008  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002008  08002008  00003008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800200c  0800200c  0000300c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002010  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  0800201c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  0800201c  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008606  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012e1  00000000  00000000  0000c63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  0000d920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004d6  00000000  00000000  0000df60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011fda  00000000  00000000  0000e436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008525  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071525  00000000  00000000  00028935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00099e5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001590  00000000  00000000  00099ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0009b430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001f34 	.word	0x08001f34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001f34 	.word	0x08001f34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b093      	sub	sp, #76	@ 0x4c
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa3a 	bl	800069e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f883 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8fd 	bl	800042c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000232:	f000 f8c7 	bl	80003c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t UART1_rxBuffer[3] = {'0', '0'};
 8000236:	2344      	movs	r3, #68	@ 0x44
 8000238:	18fb      	adds	r3, r7, r3
 800023a:	4a39      	ldr	r2, [pc, #228]	@ (8000320 <main+0x100>)
 800023c:	8811      	ldrh	r1, [r2, #0]
 800023e:	8019      	strh	r1, [r3, #0]
 8000240:	7892      	ldrb	r2, [r2, #2]
 8000242:	709a      	strb	r2, [r3, #2]
  uint8_t UART1_txMessage[] = "Invalid value(3). The only valid values are 0 or 1\n";
 8000244:	2310      	movs	r3, #16
 8000246:	18fa      	adds	r2, r7, r3
 8000248:	4b36      	ldr	r3, [pc, #216]	@ (8000324 <main+0x104>)
 800024a:	0010      	movs	r0, r2
 800024c:	0019      	movs	r1, r3
 800024e:	2334      	movs	r3, #52	@ 0x34
 8000250:	001a      	movs	r2, r3
 8000252:	f001 fe65 	bl	8001f20 <memcpy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, UART1_rxBuffer, 2, 5000);
 8000256:	2647      	movs	r6, #71	@ 0x47
 8000258:	19bc      	adds	r4, r7, r6
 800025a:	4b33      	ldr	r3, [pc, #204]	@ (8000328 <main+0x108>)
 800025c:	2544      	movs	r5, #68	@ 0x44
 800025e:	1979      	adds	r1, r7, r5
 8000260:	4832      	ldr	r0, [pc, #200]	@ (800032c <main+0x10c>)
 8000262:	2202      	movs	r2, #2
 8000264:	f001 f998 	bl	8001598 <HAL_UART_Receive>
 8000268:	0003      	movs	r3, r0
 800026a:	7023      	strb	r3, [r4, #0]
	  if (status == HAL_OK) {
 800026c:	19bb      	adds	r3, r7, r6
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d147      	bne.n	8000304 <main+0xe4>
		  if ((UART1_rxBuffer[0] != '0' && UART1_rxBuffer[0] != '1')
 8000274:	197b      	adds	r3, r7, r5
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b30      	cmp	r3, #48	@ 0x30
 800027a:	d003      	beq.n	8000284 <main+0x64>
 800027c:	197b      	adds	r3, r7, r5
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b31      	cmp	r3, #49	@ 0x31
 8000282:	d108      	bne.n	8000296 <main+0x76>
		  || (UART1_rxBuffer[1] != '0' && UART1_rxBuffer[1] != '1')){
 8000284:	2244      	movs	r2, #68	@ 0x44
 8000286:	18bb      	adds	r3, r7, r2
 8000288:	785b      	ldrb	r3, [r3, #1]
 800028a:	2b30      	cmp	r3, #48	@ 0x30
 800028c:	d00b      	beq.n	80002a6 <main+0x86>
 800028e:	18bb      	adds	r3, r7, r2
 8000290:	785b      	ldrb	r3, [r3, #1]
 8000292:	2b31      	cmp	r3, #49	@ 0x31
 8000294:	d007      	beq.n	80002a6 <main+0x86>
		  	  HAL_UART_Transmit(&huart2, UART1_txMessage,
 8000296:	2310      	movs	r3, #16
 8000298:	18f9      	adds	r1, r7, r3
 800029a:	4824      	ldr	r0, [pc, #144]	@ (800032c <main+0x10c>)
 800029c:	2364      	movs	r3, #100	@ 0x64
 800029e:	2234      	movs	r2, #52	@ 0x34
 80002a0:	f001 f8d6 	bl	8001450 <HAL_UART_Transmit>
 80002a4:	e03a      	b.n	800031c <main+0xfc>
				  	  	  	sizeof(UART1_txMessage), 100);
		  }
		  else {
			  HAL_UART_Transmit(&huart2, UART1_rxBuffer,
 80002a6:	2444      	movs	r4, #68	@ 0x44
 80002a8:	1939      	adds	r1, r7, r4
 80002aa:	4820      	ldr	r0, [pc, #128]	@ (800032c <main+0x10c>)
 80002ac:	2364      	movs	r3, #100	@ 0x64
 80002ae:	2203      	movs	r2, #3
 80002b0:	f001 f8ce 	bl	8001450 <HAL_UART_Transmit>
			  			  	    sizeof(UART1_rxBuffer), 100);
			  if (UART1_rxBuffer[0] == '0') {
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b30      	cmp	r3, #48	@ 0x30
 80002ba:	d107      	bne.n	80002cc <main+0xac>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80002bc:	23a0      	movs	r3, #160	@ 0xa0
 80002be:	05db      	lsls	r3, r3, #23
 80002c0:	2200      	movs	r2, #0
 80002c2:	2102      	movs	r1, #2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 fcb7 	bl	8000c38 <HAL_GPIO_WritePin>
 80002ca:	e006      	b.n	80002da <main+0xba>
			  }
			  else {
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80002cc:	23a0      	movs	r3, #160	@ 0xa0
 80002ce:	05db      	lsls	r3, r3, #23
 80002d0:	2201      	movs	r2, #1
 80002d2:	2102      	movs	r1, #2
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 fcaf 	bl	8000c38 <HAL_GPIO_WritePin>
			  }

			  if (UART1_rxBuffer[1] == '0') {
 80002da:	2344      	movs	r3, #68	@ 0x44
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	785b      	ldrb	r3, [r3, #1]
 80002e0:	2b30      	cmp	r3, #48	@ 0x30
 80002e2:	d107      	bne.n	80002f4 <main+0xd4>
			  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80002e4:	23a0      	movs	r3, #160	@ 0xa0
 80002e6:	05db      	lsls	r3, r3, #23
 80002e8:	2200      	movs	r2, #0
 80002ea:	2101      	movs	r1, #1
 80002ec:	0018      	movs	r0, r3
 80002ee:	f000 fca3 	bl	8000c38 <HAL_GPIO_WritePin>
 80002f2:	e7b0      	b.n	8000256 <main+0x36>
			  }
			  else {
			  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80002f4:	23a0      	movs	r3, #160	@ 0xa0
 80002f6:	05db      	lsls	r3, r3, #23
 80002f8:	2201      	movs	r2, #1
 80002fa:	2101      	movs	r1, #1
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 fc9b 	bl	8000c38 <HAL_GPIO_WritePin>
 8000302:	e7a8      	b.n	8000256 <main+0x36>
			  }
		  }
	  }
	  else {
		  uint8_t timeout_message[] = "Timeout\n";
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	4a0a      	ldr	r2, [pc, #40]	@ (8000330 <main+0x110>)
 8000308:	ca03      	ldmia	r2!, {r0, r1}
 800030a:	c303      	stmia	r3!, {r0, r1}
 800030c:	7812      	ldrb	r2, [r2, #0]
 800030e:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, timeout_message, 9, 100);
 8000310:	1d39      	adds	r1, r7, #4
 8000312:	4806      	ldr	r0, [pc, #24]	@ (800032c <main+0x10c>)
 8000314:	2364      	movs	r3, #100	@ 0x64
 8000316:	2209      	movs	r2, #9
 8000318:	f001 f89a 	bl	8001450 <HAL_UART_Transmit>
  {
 800031c:	e79b      	b.n	8000256 <main+0x36>
 800031e:	46c0      	nop			@ (mov r8, r8)
 8000320:	08001f4c 	.word	0x08001f4c
 8000324:	08001f50 	.word	0x08001f50
 8000328:	00001388 	.word	0x00001388
 800032c:	20000028 	.word	0x20000028
 8000330:	08001f84 	.word	0x08001f84

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b590      	push	{r4, r7, lr}
 8000336:	b08d      	sub	sp, #52	@ 0x34
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	2414      	movs	r4, #20
 800033c:	193b      	adds	r3, r7, r4
 800033e:	0018      	movs	r0, r3
 8000340:	231c      	movs	r3, #28
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f001 fdbf 	bl	8001ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034a:	003b      	movs	r3, r7
 800034c:	0018      	movs	r0, r3
 800034e:	2314      	movs	r3, #20
 8000350:	001a      	movs	r2, r3
 8000352:	2100      	movs	r1, #0
 8000354:	f001 fdb8 	bl	8001ec8 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8000358:	4b19      	ldr	r3, [pc, #100]	@ (80003c0 <SystemClock_Config+0x8c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	2207      	movs	r2, #7
 800035e:	4393      	bics	r3, r2
 8000360:	001a      	movs	r2, r3
 8000362:	4b17      	ldr	r3, [pc, #92]	@ (80003c0 <SystemClock_Config+0x8c>)
 8000364:	2101      	movs	r1, #1
 8000366:	430a      	orrs	r2, r1
 8000368:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800036a:	193b      	adds	r3, r7, r4
 800036c:	2201      	movs	r2, #1
 800036e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000370:	193b      	adds	r3, r7, r4
 8000372:	2280      	movs	r2, #128	@ 0x80
 8000374:	0252      	lsls	r2, r2, #9
 8000376:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	193b      	adds	r3, r7, r4
 800037a:	0018      	movs	r0, r3
 800037c:	f000 fcb8 	bl	8000cf0 <HAL_RCC_OscConfig>
 8000380:	1e03      	subs	r3, r0, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000384:	f000 f8be 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000388:	003b      	movs	r3, r7
 800038a:	2207      	movs	r2, #7
 800038c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800038e:	003b      	movs	r3, r7
 8000390:	2201      	movs	r2, #1
 8000392:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	003b      	movs	r3, r7
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800039a:	003b      	movs	r3, r7
 800039c:	2200      	movs	r2, #0
 800039e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003a0:	003b      	movs	r3, r7
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a6:	003b      	movs	r3, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	0018      	movs	r0, r3
 80003ac:	f000 fe84 	bl	80010b8 <HAL_RCC_ClockConfig>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003b4:	f000 f8a6 	bl	8000504 <Error_Handler>
  }
}
 80003b8:	46c0      	nop			@ (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b00d      	add	sp, #52	@ 0x34
 80003be:	bd90      	pop	{r4, r7, pc}
 80003c0:	40022000 	.word	0x40022000

080003c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c8:	4b16      	ldr	r3, [pc, #88]	@ (8000424 <MX_USART2_UART_Init+0x60>)
 80003ca:	4a17      	ldr	r2, [pc, #92]	@ (8000428 <MX_USART2_UART_Init+0x64>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ce:	4b15      	ldr	r3, [pc, #84]	@ (8000424 <MX_USART2_UART_Init+0x60>)
 80003d0:	22e1      	movs	r2, #225	@ 0xe1
 80003d2:	0252      	lsls	r2, r2, #9
 80003d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b13      	ldr	r3, [pc, #76]	@ (8000424 <MX_USART2_UART_Init+0x60>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <MX_USART2_UART_Init+0x60>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b10      	ldr	r3, [pc, #64]	@ (8000424 <MX_USART2_UART_Init+0x60>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000424 <MX_USART2_UART_Init+0x60>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000424 <MX_USART2_UART_Init+0x60>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000424 <MX_USART2_UART_Init+0x60>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000424 <MX_USART2_UART_Init+0x60>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000400:	4b08      	ldr	r3, [pc, #32]	@ (8000424 <MX_USART2_UART_Init+0x60>)
 8000402:	2200      	movs	r2, #0
 8000404:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000406:	4b07      	ldr	r3, [pc, #28]	@ (8000424 <MX_USART2_UART_Init+0x60>)
 8000408:	2200      	movs	r2, #0
 800040a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800040c:	4b05      	ldr	r3, [pc, #20]	@ (8000424 <MX_USART2_UART_Init+0x60>)
 800040e:	0018      	movs	r0, r3
 8000410:	f000 ffc8 	bl	80013a4 <HAL_UART_Init>
 8000414:	1e03      	subs	r3, r0, #0
 8000416:	d001      	beq.n	800041c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000418:	f000 f874 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800041c:	46c0      	nop			@ (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	20000028 	.word	0x20000028
 8000428:	40004400 	.word	0x40004400

0800042c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b089      	sub	sp, #36	@ 0x24
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	240c      	movs	r4, #12
 8000434:	193b      	adds	r3, r7, r4
 8000436:	0018      	movs	r0, r3
 8000438:	2314      	movs	r3, #20
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f001 fd43 	bl	8001ec8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000442:	4b2d      	ldr	r3, [pc, #180]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 8000444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000446:	4b2c      	ldr	r3, [pc, #176]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 8000448:	2104      	movs	r1, #4
 800044a:	430a      	orrs	r2, r1
 800044c:	635a      	str	r2, [r3, #52]	@ 0x34
 800044e:	4b2a      	ldr	r3, [pc, #168]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 8000450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000452:	2204      	movs	r2, #4
 8000454:	4013      	ands	r3, r2
 8000456:	60bb      	str	r3, [r7, #8]
 8000458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045a:	4b27      	ldr	r3, [pc, #156]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 800045c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800045e:	4b26      	ldr	r3, [pc, #152]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 8000460:	2120      	movs	r1, #32
 8000462:	430a      	orrs	r2, r1
 8000464:	635a      	str	r2, [r3, #52]	@ 0x34
 8000466:	4b24      	ldr	r3, [pc, #144]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 8000468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800046a:	2220      	movs	r2, #32
 800046c:	4013      	ands	r3, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b21      	ldr	r3, [pc, #132]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 8000474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000476:	4b20      	ldr	r3, [pc, #128]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 8000478:	2101      	movs	r1, #1
 800047a:	430a      	orrs	r2, r1
 800047c:	635a      	str	r2, [r3, #52]	@ 0x34
 800047e:	4b1e      	ldr	r3, [pc, #120]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 8000480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000482:	2201      	movs	r2, #1
 8000484:	4013      	ands	r3, r2
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800048a:	23a0      	movs	r3, #160	@ 0xa0
 800048c:	05db      	lsls	r3, r3, #23
 800048e:	2200      	movs	r2, #0
 8000490:	2103      	movs	r1, #3
 8000492:	0018      	movs	r0, r3
 8000494:	f000 fbd0 	bl	8000c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2280      	movs	r2, #128	@ 0x80
 800049c:	0192      	lsls	r2, r2, #6
 800049e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	4a16      	ldr	r2, [pc, #88]	@ (80004fc <MX_GPIO_Init+0xd0>)
 80004a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	4a14      	ldr	r2, [pc, #80]	@ (8000500 <MX_GPIO_Init+0xd4>)
 80004b0:	0019      	movs	r1, r3
 80004b2:	0010      	movs	r0, r2
 80004b4:	f000 fa4e 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004b8:	0021      	movs	r1, r4
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2203      	movs	r2, #3
 80004be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2201      	movs	r2, #1
 80004c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d2:	187a      	adds	r2, r7, r1
 80004d4:	23a0      	movs	r3, #160	@ 0xa0
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	0011      	movs	r1, r2
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fa3a 	bl	8000954 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2100      	movs	r1, #0
 80004e4:	2007      	movs	r0, #7
 80004e6:	f000 fa03 	bl	80008f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004ea:	2007      	movs	r0, #7
 80004ec:	f000 fa15 	bl	800091a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004f0:	46c0      	nop			@ (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b009      	add	sp, #36	@ 0x24
 80004f6:	bd90      	pop	{r4, r7, pc}
 80004f8:	40021000 	.word	0x40021000
 80004fc:	10110000 	.word	0x10110000
 8000500:	50000800 	.word	0x50000800

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	e7fd      	b.n	800050c <Error_Handler+0x8>

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000516:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <HAL_MspInit+0x44>)
 8000518:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800051a:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <HAL_MspInit+0x44>)
 800051c:	2101      	movs	r1, #1
 800051e:	430a      	orrs	r2, r1
 8000520:	641a      	str	r2, [r3, #64]	@ 0x40
 8000522:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <HAL_MspInit+0x44>)
 8000524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000526:	2201      	movs	r2, #1
 8000528:	4013      	ands	r3, r2
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <HAL_MspInit+0x44>)
 8000530:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000532:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <HAL_MspInit+0x44>)
 8000534:	2180      	movs	r1, #128	@ 0x80
 8000536:	0549      	lsls	r1, r1, #21
 8000538:	430a      	orrs	r2, r1
 800053a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800053c:	4b05      	ldr	r3, [pc, #20]	@ (8000554 <HAL_MspInit+0x44>)
 800053e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000540:	2380      	movs	r3, #128	@ 0x80
 8000542:	055b      	lsls	r3, r3, #21
 8000544:	4013      	ands	r3, r2
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b002      	add	sp, #8
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b08b      	sub	sp, #44	@ 0x2c
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	2414      	movs	r4, #20
 8000562:	193b      	adds	r3, r7, r4
 8000564:	0018      	movs	r0, r3
 8000566:	2314      	movs	r3, #20
 8000568:	001a      	movs	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	f001 fcac 	bl	8001ec8 <memset>
  if(huart->Instance==USART2)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a1b      	ldr	r2, [pc, #108]	@ (80005e4 <HAL_UART_MspInit+0x8c>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d130      	bne.n	80005dc <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800057a:	4b1b      	ldr	r3, [pc, #108]	@ (80005e8 <HAL_UART_MspInit+0x90>)
 800057c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800057e:	4b1a      	ldr	r3, [pc, #104]	@ (80005e8 <HAL_UART_MspInit+0x90>)
 8000580:	2180      	movs	r1, #128	@ 0x80
 8000582:	0289      	lsls	r1, r1, #10
 8000584:	430a      	orrs	r2, r1
 8000586:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000588:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <HAL_UART_MspInit+0x90>)
 800058a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800058c:	2380      	movs	r3, #128	@ 0x80
 800058e:	029b      	lsls	r3, r3, #10
 8000590:	4013      	ands	r3, r2
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <HAL_UART_MspInit+0x90>)
 8000598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800059a:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <HAL_UART_MspInit+0x90>)
 800059c:	2101      	movs	r1, #1
 800059e:	430a      	orrs	r2, r1
 80005a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80005a2:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <HAL_UART_MspInit+0x90>)
 80005a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005a6:	2201      	movs	r2, #1
 80005a8:	4013      	ands	r3, r2
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_USART2_TX_Pin|VCP_USART2_RX_Pin;
 80005ae:	0021      	movs	r1, r4
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	220c      	movs	r2, #12
 80005b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2202      	movs	r2, #2
 80005ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2201      	movs	r2, #1
 80005cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	187a      	adds	r2, r7, r1
 80005d0:	23a0      	movs	r3, #160	@ 0xa0
 80005d2:	05db      	lsls	r3, r3, #23
 80005d4:	0011      	movs	r1, r2
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 f9bc 	bl	8000954 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80005dc:	46c0      	nop			@ (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	b00b      	add	sp, #44	@ 0x2c
 80005e2:	bd90      	pop	{r4, r7, pc}
 80005e4:	40004400 	.word	0x40004400
 80005e8:	40021000 	.word	0x40021000

080005ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f0:	46c0      	nop			@ (mov r8, r8)
 80005f2:	e7fd      	b.n	80005f0 <NMI_Handler+0x4>

080005f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f8:	46c0      	nop			@ (mov r8, r8)
 80005fa:	e7fd      	b.n	80005f8 <HardFault_Handler+0x4>

080005fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000614:	f000 f8a4 	bl	8000760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000618:	46c0      	nop			@ (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 8000622:	2380      	movs	r3, #128	@ 0x80
 8000624:	019b      	lsls	r3, r3, #6
 8000626:	0018      	movs	r0, r3
 8000628:	f000 fb24 	bl	8000c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000638:	4b03      	ldr	r3, [pc, #12]	@ (8000648 <SystemInit+0x14>)
 800063a:	2280      	movs	r2, #128	@ 0x80
 800063c:	0512      	lsls	r2, r2, #20
 800063e:	609a      	str	r2, [r3, #8]
#endif
}
 8000640:	46c0      	nop			@ (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800064c:	480d      	ldr	r0, [pc, #52]	@ (8000684 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000650:	f7ff fff0 	bl	8000634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000654:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000656:	e003      	b.n	8000660 <LoopCopyDataInit>

08000658 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000658:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800065a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800065c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800065e:	3104      	adds	r1, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000660:	480a      	ldr	r0, [pc, #40]	@ (800068c <LoopForever+0xa>)
  ldr r3, =_edata
 8000662:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <LoopForever+0xe>)
  adds r2, r0, r1
 8000664:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000666:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000668:	d3f6      	bcc.n	8000658 <CopyDataInit>
  ldr r2, =_sbss
 800066a:	4a0a      	ldr	r2, [pc, #40]	@ (8000694 <LoopForever+0x12>)
  b LoopFillZerobss
 800066c:	e002      	b.n	8000674 <LoopFillZerobss>

0800066e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000670:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000672:	3204      	adds	r2, #4

08000674 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000674:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <LoopForever+0x16>)
  cmp r2, r3
 8000676:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000678:	d3f9      	bcc.n	800066e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800067a:	f001 fc2d 	bl	8001ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067e:	f7ff fdcf 	bl	8000220 <main>

08000682 <LoopForever>:

LoopForever:
    b LoopForever
 8000682:	e7fe      	b.n	8000682 <LoopForever>
  ldr   r0, =_estack
 8000684:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000688:	08002010 	.word	0x08002010
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000690:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000694:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000698:	200000c0 	.word	0x200000c0

0800069c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC1_IRQHandler>

0800069e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b082      	sub	sp, #8
 80006a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006a4:	1dfb      	adds	r3, r7, #7
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006aa:	2003      	movs	r0, #3
 80006ac:	f000 f80e 	bl	80006cc <HAL_InitTick>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d003      	beq.n	80006bc <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80006b4:	1dfb      	adds	r3, r7, #7
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	e001      	b.n	80006c0 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006bc:	f7ff ff28 	bl	8000510 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	781b      	ldrb	r3, [r3, #0]
}
 80006c4:	0018      	movs	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b002      	add	sp, #8
 80006ca:	bd80      	pop	{r7, pc}

080006cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006d4:	230f      	movs	r3, #15
 80006d6:	18fb      	adds	r3, r7, r3
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80006dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <HAL_InitTick+0x88>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d02b      	beq.n	800073c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80006e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <HAL_InitTick+0x8c>)
 80006e6:	681c      	ldr	r4, [r3, #0]
 80006e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <HAL_InitTick+0x88>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	0019      	movs	r1, r3
 80006ee:	23fa      	movs	r3, #250	@ 0xfa
 80006f0:	0098      	lsls	r0, r3, #2
 80006f2:	f7ff fd09 	bl	8000108 <__udivsi3>
 80006f6:	0003      	movs	r3, r0
 80006f8:	0019      	movs	r1, r3
 80006fa:	0020      	movs	r0, r4
 80006fc:	f7ff fd04 	bl	8000108 <__udivsi3>
 8000700:	0003      	movs	r3, r0
 8000702:	0018      	movs	r0, r3
 8000704:	f000 f919 	bl	800093a <HAL_SYSTICK_Config>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d112      	bne.n	8000732 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b03      	cmp	r3, #3
 8000710:	d80a      	bhi.n	8000728 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	2301      	movs	r3, #1
 8000716:	425b      	negs	r3, r3
 8000718:	2200      	movs	r2, #0
 800071a:	0018      	movs	r0, r3
 800071c:	f000 f8e8 	bl	80008f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_InitTick+0x90>)
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	e00d      	b.n	8000744 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000728:	230f      	movs	r3, #15
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	2201      	movs	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]
 8000730:	e008      	b.n	8000744 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000732:	230f      	movs	r3, #15
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
 800073a:	e003      	b.n	8000744 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800073c:	230f      	movs	r3, #15
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000744:	230f      	movs	r3, #15
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	781b      	ldrb	r3, [r3, #0]
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b005      	add	sp, #20
 8000750:	bd90      	pop	{r4, r7, pc}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	20000008 	.word	0x20000008
 8000758:	20000000 	.word	0x20000000
 800075c:	20000004 	.word	0x20000004

08000760 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000764:	4b05      	ldr	r3, [pc, #20]	@ (800077c <HAL_IncTick+0x1c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	001a      	movs	r2, r3
 800076a:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <HAL_IncTick+0x20>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	18d2      	adds	r2, r2, r3
 8000770:	4b03      	ldr	r3, [pc, #12]	@ (8000780 <HAL_IncTick+0x20>)
 8000772:	601a      	str	r2, [r3, #0]
}
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	20000008 	.word	0x20000008
 8000780:	200000bc 	.word	0x200000bc

08000784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  return uwTick;
 8000788:	4b02      	ldr	r3, [pc, #8]	@ (8000794 <HAL_GetTick+0x10>)
 800078a:	681b      	ldr	r3, [r3, #0]
}
 800078c:	0018      	movs	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	200000bc 	.word	0x200000bc

08000798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	0002      	movs	r2, r0
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80007aa:	d809      	bhi.n	80007c0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	001a      	movs	r2, r3
 80007b2:	231f      	movs	r3, #31
 80007b4:	401a      	ands	r2, r3
 80007b6:	4b04      	ldr	r3, [pc, #16]	@ (80007c8 <__NVIC_EnableIRQ+0x30>)
 80007b8:	2101      	movs	r1, #1
 80007ba:	4091      	lsls	r1, r2
 80007bc:	000a      	movs	r2, r1
 80007be:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80007c0:	46c0      	nop			@ (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b002      	add	sp, #8
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	e000e100 	.word	0xe000e100

080007cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	0002      	movs	r2, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	1dfb      	adds	r3, r7, #7
 80007d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b7f      	cmp	r3, #127	@ 0x7f
 80007e0:	d828      	bhi.n	8000834 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e2:	4a2f      	ldr	r2, [pc, #188]	@ (80008a0 <__NVIC_SetPriority+0xd4>)
 80007e4:	1dfb      	adds	r3, r7, #7
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b25b      	sxtb	r3, r3
 80007ea:	089b      	lsrs	r3, r3, #2
 80007ec:	33c0      	adds	r3, #192	@ 0xc0
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	589b      	ldr	r3, [r3, r2]
 80007f2:	1dfa      	adds	r2, r7, #7
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	0011      	movs	r1, r2
 80007f8:	2203      	movs	r2, #3
 80007fa:	400a      	ands	r2, r1
 80007fc:	00d2      	lsls	r2, r2, #3
 80007fe:	21ff      	movs	r1, #255	@ 0xff
 8000800:	4091      	lsls	r1, r2
 8000802:	000a      	movs	r2, r1
 8000804:	43d2      	mvns	r2, r2
 8000806:	401a      	ands	r2, r3
 8000808:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	019b      	lsls	r3, r3, #6
 800080e:	22ff      	movs	r2, #255	@ 0xff
 8000810:	401a      	ands	r2, r3
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	0018      	movs	r0, r3
 8000818:	2303      	movs	r3, #3
 800081a:	4003      	ands	r3, r0
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000820:	481f      	ldr	r0, [pc, #124]	@ (80008a0 <__NVIC_SetPriority+0xd4>)
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b25b      	sxtb	r3, r3
 8000828:	089b      	lsrs	r3, r3, #2
 800082a:	430a      	orrs	r2, r1
 800082c:	33c0      	adds	r3, #192	@ 0xc0
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000832:	e031      	b.n	8000898 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000834:	4a1b      	ldr	r2, [pc, #108]	@ (80008a4 <__NVIC_SetPriority+0xd8>)
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	0019      	movs	r1, r3
 800083c:	230f      	movs	r3, #15
 800083e:	400b      	ands	r3, r1
 8000840:	3b08      	subs	r3, #8
 8000842:	089b      	lsrs	r3, r3, #2
 8000844:	3306      	adds	r3, #6
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	18d3      	adds	r3, r2, r3
 800084a:	3304      	adds	r3, #4
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	1dfa      	adds	r2, r7, #7
 8000850:	7812      	ldrb	r2, [r2, #0]
 8000852:	0011      	movs	r1, r2
 8000854:	2203      	movs	r2, #3
 8000856:	400a      	ands	r2, r1
 8000858:	00d2      	lsls	r2, r2, #3
 800085a:	21ff      	movs	r1, #255	@ 0xff
 800085c:	4091      	lsls	r1, r2
 800085e:	000a      	movs	r2, r1
 8000860:	43d2      	mvns	r2, r2
 8000862:	401a      	ands	r2, r3
 8000864:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	019b      	lsls	r3, r3, #6
 800086a:	22ff      	movs	r2, #255	@ 0xff
 800086c:	401a      	ands	r2, r3
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	0018      	movs	r0, r3
 8000874:	2303      	movs	r3, #3
 8000876:	4003      	ands	r3, r0
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800087c:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <__NVIC_SetPriority+0xd8>)
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	001c      	movs	r4, r3
 8000884:	230f      	movs	r3, #15
 8000886:	4023      	ands	r3, r4
 8000888:	3b08      	subs	r3, #8
 800088a:	089b      	lsrs	r3, r3, #2
 800088c:	430a      	orrs	r2, r1
 800088e:	3306      	adds	r3, #6
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	18c3      	adds	r3, r0, r3
 8000894:	3304      	adds	r3, #4
 8000896:	601a      	str	r2, [r3, #0]
}
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b003      	add	sp, #12
 800089e:	bd90      	pop	{r4, r7, pc}
 80008a0:	e000e100 	.word	0xe000e100
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	1e5a      	subs	r2, r3, #1
 80008b4:	2380      	movs	r3, #128	@ 0x80
 80008b6:	045b      	lsls	r3, r3, #17
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d301      	bcc.n	80008c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008bc:	2301      	movs	r3, #1
 80008be:	e010      	b.n	80008e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <SysTick_Config+0x44>)
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	3a01      	subs	r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c8:	2301      	movs	r3, #1
 80008ca:	425b      	negs	r3, r3
 80008cc:	2103      	movs	r1, #3
 80008ce:	0018      	movs	r0, r3
 80008d0:	f7ff ff7c 	bl	80007cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d4:	4b05      	ldr	r3, [pc, #20]	@ (80008ec <SysTick_Config+0x44>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008da:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <SysTick_Config+0x44>)
 80008dc:	2207      	movs	r2, #7
 80008de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	0018      	movs	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b002      	add	sp, #8
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60b9      	str	r1, [r7, #8]
 80008f8:	607a      	str	r2, [r7, #4]
 80008fa:	210f      	movs	r1, #15
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	1c02      	adds	r2, r0, #0
 8000900:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	187b      	adds	r3, r7, r1
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b25b      	sxtb	r3, r3
 800090a:	0011      	movs	r1, r2
 800090c:	0018      	movs	r0, r3
 800090e:	f7ff ff5d 	bl	80007cc <__NVIC_SetPriority>
}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b004      	add	sp, #16
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	0002      	movs	r2, r0
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b25b      	sxtb	r3, r3
 800092c:	0018      	movs	r0, r3
 800092e:	f7ff ff33 	bl	8000798 <__NVIC_EnableIRQ>
}
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	b002      	add	sp, #8
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	0018      	movs	r0, r3
 8000946:	f7ff ffaf 	bl	80008a8 <SysTick_Config>
 800094a:	0003      	movs	r3, r0
}
 800094c:	0018      	movs	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}

08000954 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000962:	e153      	b.n	8000c0c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2101      	movs	r1, #1
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4091      	lsls	r1, r2
 800096e:	000a      	movs	r2, r1
 8000970:	4013      	ands	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d100      	bne.n	800097c <HAL_GPIO_Init+0x28>
 800097a:	e144      	b.n	8000c06 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d003      	beq.n	800098c <HAL_GPIO_Init+0x38>
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	2b12      	cmp	r3, #18
 800098a:	d125      	bne.n	80009d8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	08da      	lsrs	r2, r3, #3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3208      	adds	r2, #8
 8000994:	0092      	lsls	r2, r2, #2
 8000996:	58d3      	ldr	r3, [r2, r3]
 8000998:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	2207      	movs	r2, #7
 800099e:	4013      	ands	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	220f      	movs	r2, #15
 80009a4:	409a      	lsls	r2, r3
 80009a6:	0013      	movs	r3, r2
 80009a8:	43da      	mvns	r2, r3
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	4013      	ands	r3, r2
 80009ae:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	220f      	movs	r2, #15
 80009b6:	401a      	ands	r2, r3
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	2107      	movs	r1, #7
 80009bc:	400b      	ands	r3, r1
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	409a      	lsls	r2, r3
 80009c2:	0013      	movs	r3, r2
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	08da      	lsrs	r2, r3, #3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3208      	adds	r2, #8
 80009d2:	0092      	lsls	r2, r2, #2
 80009d4:	6979      	ldr	r1, [r7, #20]
 80009d6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	2203      	movs	r2, #3
 80009e4:	409a      	lsls	r2, r3
 80009e6:	0013      	movs	r3, r2
 80009e8:	43da      	mvns	r2, r3
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	4013      	ands	r3, r2
 80009ee:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	2203      	movs	r2, #3
 80009f6:	401a      	ands	r2, r3
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	409a      	lsls	r2, r3
 80009fe:	0013      	movs	r3, r2
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d00b      	beq.n	8000a2c <HAL_GPIO_Init+0xd8>
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d007      	beq.n	8000a2c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a20:	2b11      	cmp	r3, #17
 8000a22:	d003      	beq.n	8000a2c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	2b12      	cmp	r3, #18
 8000a2a:	d130      	bne.n	8000a8e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	2203      	movs	r2, #3
 8000a38:	409a      	lsls	r2, r3
 8000a3a:	0013      	movs	r3, r2
 8000a3c:	43da      	mvns	r2, r3
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	4013      	ands	r3, r2
 8000a42:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	409a      	lsls	r2, r3
 8000a4e:	0013      	movs	r3, r2
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	697a      	ldr	r2, [r7, #20]
 8000a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a62:	2201      	movs	r2, #1
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	409a      	lsls	r2, r3
 8000a68:	0013      	movs	r3, r2
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	091b      	lsrs	r3, r3, #4
 8000a78:	2201      	movs	r2, #1
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	409a      	lsls	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	697a      	ldr	r2, [r7, #20]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d017      	beq.n	8000ac6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	409a      	lsls	r2, r3
 8000aa4:	0013      	movs	r3, r2
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	2380      	movs	r3, #128	@ 0x80
 8000acc:	055b      	lsls	r3, r3, #21
 8000ace:	4013      	ands	r3, r2
 8000ad0:	d100      	bne.n	8000ad4 <HAL_GPIO_Init+0x180>
 8000ad2:	e098      	b.n	8000c06 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000ad4:	4a53      	ldr	r2, [pc, #332]	@ (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	3318      	adds	r3, #24
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	589b      	ldr	r3, [r3, r2]
 8000ae0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	220f      	movs	r2, #15
 8000aec:	409a      	lsls	r2, r3
 8000aee:	0013      	movs	r3, r2
 8000af0:	43da      	mvns	r2, r3
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	4013      	ands	r3, r2
 8000af6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	23a0      	movs	r3, #160	@ 0xa0
 8000afc:	05db      	lsls	r3, r3, #23
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d019      	beq.n	8000b36 <HAL_GPIO_Init+0x1e2>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a48      	ldr	r2, [pc, #288]	@ (8000c28 <HAL_GPIO_Init+0x2d4>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d013      	beq.n	8000b32 <HAL_GPIO_Init+0x1de>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a47      	ldr	r2, [pc, #284]	@ (8000c2c <HAL_GPIO_Init+0x2d8>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d00d      	beq.n	8000b2e <HAL_GPIO_Init+0x1da>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a46      	ldr	r2, [pc, #280]	@ (8000c30 <HAL_GPIO_Init+0x2dc>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d007      	beq.n	8000b2a <HAL_GPIO_Init+0x1d6>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a45      	ldr	r2, [pc, #276]	@ (8000c34 <HAL_GPIO_Init+0x2e0>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d101      	bne.n	8000b26 <HAL_GPIO_Init+0x1d2>
 8000b22:	2305      	movs	r3, #5
 8000b24:	e008      	b.n	8000b38 <HAL_GPIO_Init+0x1e4>
 8000b26:	2306      	movs	r3, #6
 8000b28:	e006      	b.n	8000b38 <HAL_GPIO_Init+0x1e4>
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	e004      	b.n	8000b38 <HAL_GPIO_Init+0x1e4>
 8000b2e:	2302      	movs	r3, #2
 8000b30:	e002      	b.n	8000b38 <HAL_GPIO_Init+0x1e4>
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <HAL_GPIO_Init+0x1e4>
 8000b36:	2300      	movs	r3, #0
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	2103      	movs	r1, #3
 8000b3c:	400a      	ands	r2, r1
 8000b3e:	00d2      	lsls	r2, r2, #3
 8000b40:	4093      	lsls	r3, r2
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000b48:	4936      	ldr	r1, [pc, #216]	@ (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	089b      	lsrs	r3, r3, #2
 8000b4e:	3318      	adds	r3, #24
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000b56:	4a33      	ldr	r2, [pc, #204]	@ (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000b58:	2380      	movs	r3, #128	@ 0x80
 8000b5a:	58d3      	ldr	r3, [r2, r3]
 8000b5c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	43da      	mvns	r2, r3
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	4013      	ands	r3, r2
 8000b66:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	2380      	movs	r3, #128	@ 0x80
 8000b6e:	025b      	lsls	r3, r3, #9
 8000b70:	4013      	ands	r3, r2
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000b7c:	4929      	ldr	r1, [pc, #164]	@ (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000b7e:	2280      	movs	r2, #128	@ 0x80
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000b84:	4a27      	ldr	r2, [pc, #156]	@ (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000b86:	2384      	movs	r3, #132	@ 0x84
 8000b88:	58d3      	ldr	r3, [r2, r3]
 8000b8a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	4013      	ands	r3, r2
 8000b94:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	2380      	movs	r3, #128	@ 0x80
 8000b9c:	029b      	lsls	r3, r3, #10
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000baa:	491e      	ldr	r1, [pc, #120]	@ (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000bac:	2284      	movs	r2, #132	@ 0x84
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	2380      	movs	r3, #128	@ 0x80
 8000bc8:	035b      	lsls	r3, r3, #13
 8000bca:	4013      	ands	r3, r2
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	43da      	mvns	r2, r3
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	4013      	ands	r3, r2
 8000bea:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	2380      	movs	r3, #128	@ 0x80
 8000bf2:	039b      	lsls	r3, r3, #14
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	d003      	beq.n	8000c00 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	40da      	lsrs	r2, r3
 8000c14:	1e13      	subs	r3, r2, #0
 8000c16:	d000      	beq.n	8000c1a <HAL_GPIO_Init+0x2c6>
 8000c18:	e6a4      	b.n	8000964 <HAL_GPIO_Init+0x10>
  }
}
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b006      	add	sp, #24
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40021800 	.word	0x40021800
 8000c28:	50000400 	.word	0x50000400
 8000c2c:	50000800 	.word	0x50000800
 8000c30:	50000c00 	.word	0x50000c00
 8000c34:	50001400 	.word	0x50001400

08000c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	0008      	movs	r0, r1
 8000c42:	0011      	movs	r1, r2
 8000c44:	1cbb      	adds	r3, r7, #2
 8000c46:	1c02      	adds	r2, r0, #0
 8000c48:	801a      	strh	r2, [r3, #0]
 8000c4a:	1c7b      	adds	r3, r7, #1
 8000c4c:	1c0a      	adds	r2, r1, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c50:	1c7b      	adds	r3, r7, #1
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d004      	beq.n	8000c62 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c58:	1cbb      	adds	r3, r7, #2
 8000c5a:	881a      	ldrh	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c60:	e003      	b.n	8000c6a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c62:	1cbb      	adds	r3, r7, #2
 8000c64:	881a      	ldrh	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b002      	add	sp, #8
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	1dbb      	adds	r3, r7, #6
 8000c7e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8000c80:	4b10      	ldr	r3, [pc, #64]	@ (8000cc4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	1dba      	adds	r2, r7, #6
 8000c86:	8812      	ldrh	r2, [r2, #0]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	d008      	beq.n	8000c9e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c8e:	1dba      	adds	r2, r7, #6
 8000c90:	8812      	ldrh	r2, [r2, #0]
 8000c92:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000c94:	1dbb      	adds	r3, r7, #6
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f000 f815 	bl	8000cc8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	1dba      	adds	r2, r7, #6
 8000ca4:	8812      	ldrh	r2, [r2, #0]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	d008      	beq.n	8000cbc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000cac:	1dba      	adds	r2, r7, #6
 8000cae:	8812      	ldrh	r2, [r2, #0]
 8000cb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000cb2:	1dbb      	adds	r3, r7, #6
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f000 f810 	bl	8000cdc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000cbc:	46c0      	nop			@ (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40021800 	.word	0x40021800

08000cc8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	0002      	movs	r2, r0
 8000cd0:	1dbb      	adds	r3, r7, #6
 8000cd2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000cd4:	46c0      	nop			@ (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b002      	add	sp, #8
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	1dbb      	adds	r3, r7, #6
 8000ce6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000ce8:	46c0      	nop			@ (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d101      	bne.n	8000d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e1d0      	b.n	80010a4 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2201      	movs	r2, #1
 8000d08:	4013      	ands	r3, r2
 8000d0a:	d100      	bne.n	8000d0e <HAL_RCC_OscConfig+0x1e>
 8000d0c:	e069      	b.n	8000de2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d0e:	4bc8      	ldr	r3, [pc, #800]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	2238      	movs	r2, #56	@ 0x38
 8000d14:	4013      	ands	r3, r2
 8000d16:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	2b08      	cmp	r3, #8
 8000d1c:	d105      	bne.n	8000d2a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d15d      	bne.n	8000de2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e1bc      	b.n	80010a4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	025b      	lsls	r3, r3, #9
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d107      	bne.n	8000d46 <HAL_RCC_OscConfig+0x56>
 8000d36:	4bbe      	ldr	r3, [pc, #760]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	4bbd      	ldr	r3, [pc, #756]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000d3c:	2180      	movs	r1, #128	@ 0x80
 8000d3e:	0249      	lsls	r1, r1, #9
 8000d40:	430a      	orrs	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	e020      	b.n	8000d88 <HAL_RCC_OscConfig+0x98>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	23a0      	movs	r3, #160	@ 0xa0
 8000d4c:	02db      	lsls	r3, r3, #11
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d10e      	bne.n	8000d70 <HAL_RCC_OscConfig+0x80>
 8000d52:	4bb7      	ldr	r3, [pc, #732]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4bb6      	ldr	r3, [pc, #728]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000d58:	2180      	movs	r1, #128	@ 0x80
 8000d5a:	02c9      	lsls	r1, r1, #11
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	4bb3      	ldr	r3, [pc, #716]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4bb2      	ldr	r3, [pc, #712]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000d66:	2180      	movs	r1, #128	@ 0x80
 8000d68:	0249      	lsls	r1, r1, #9
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	e00b      	b.n	8000d88 <HAL_RCC_OscConfig+0x98>
 8000d70:	4baf      	ldr	r3, [pc, #700]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4bae      	ldr	r3, [pc, #696]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000d76:	49af      	ldr	r1, [pc, #700]	@ (8001034 <HAL_RCC_OscConfig+0x344>)
 8000d78:	400a      	ands	r2, r1
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	4bac      	ldr	r3, [pc, #688]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4bab      	ldr	r3, [pc, #684]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000d82:	49ad      	ldr	r1, [pc, #692]	@ (8001038 <HAL_RCC_OscConfig+0x348>)
 8000d84:	400a      	ands	r2, r1
 8000d86:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d014      	beq.n	8000dba <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d90:	f7ff fcf8 	bl	8000784 <HAL_GetTick>
 8000d94:	0003      	movs	r3, r0
 8000d96:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d98:	e008      	b.n	8000dac <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000d9a:	f7ff fcf3 	bl	8000784 <HAL_GetTick>
 8000d9e:	0002      	movs	r2, r0
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b64      	cmp	r3, #100	@ 0x64
 8000da6:	d901      	bls.n	8000dac <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000da8:	2303      	movs	r3, #3
 8000daa:	e17b      	b.n	80010a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dac:	4ba0      	ldr	r3, [pc, #640]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	2380      	movs	r3, #128	@ 0x80
 8000db2:	029b      	lsls	r3, r3, #10
 8000db4:	4013      	ands	r3, r2
 8000db6:	d0f0      	beq.n	8000d9a <HAL_RCC_OscConfig+0xaa>
 8000db8:	e013      	b.n	8000de2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dba:	f7ff fce3 	bl	8000784 <HAL_GetTick>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000dc4:	f7ff fcde 	bl	8000784 <HAL_GetTick>
 8000dc8:	0002      	movs	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b64      	cmp	r3, #100	@ 0x64
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e166      	b.n	80010a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000dd6:	4b96      	ldr	r3, [pc, #600]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	2380      	movs	r3, #128	@ 0x80
 8000ddc:	029b      	lsls	r3, r3, #10
 8000dde:	4013      	ands	r3, r2
 8000de0:	d1f0      	bne.n	8000dc4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2202      	movs	r2, #2
 8000de8:	4013      	ands	r3, r2
 8000dea:	d100      	bne.n	8000dee <HAL_RCC_OscConfig+0xfe>
 8000dec:	e086      	b.n	8000efc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dee:	4b90      	ldr	r3, [pc, #576]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	2238      	movs	r2, #56	@ 0x38
 8000df4:	4013      	ands	r3, r2
 8000df6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d12f      	bne.n	8000e5e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e14c      	b.n	80010a4 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0a:	4b89      	ldr	r3, [pc, #548]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	4a8b      	ldr	r2, [pc, #556]	@ (800103c <HAL_RCC_OscConfig+0x34c>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	0019      	movs	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	021a      	lsls	r2, r3, #8
 8000e1a:	4b85      	ldr	r3, [pc, #532]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d112      	bne.n	8000e4c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e26:	4b82      	ldr	r3, [pc, #520]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a85      	ldr	r2, [pc, #532]	@ (8001040 <HAL_RCC_OscConfig+0x350>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	0019      	movs	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	4b7e      	ldr	r3, [pc, #504]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000e36:	430a      	orrs	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000e3a:	4b7d      	ldr	r3, [pc, #500]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	0adb      	lsrs	r3, r3, #11
 8000e40:	2207      	movs	r2, #7
 8000e42:	4013      	ands	r3, r2
 8000e44:	4a7f      	ldr	r2, [pc, #508]	@ (8001044 <HAL_RCC_OscConfig+0x354>)
 8000e46:	40da      	lsrs	r2, r3
 8000e48:	4b7f      	ldr	r3, [pc, #508]	@ (8001048 <HAL_RCC_OscConfig+0x358>)
 8000e4a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e4c:	4b7f      	ldr	r3, [pc, #508]	@ (800104c <HAL_RCC_OscConfig+0x35c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	0018      	movs	r0, r3
 8000e52:	f7ff fc3b 	bl	80006cc <HAL_InitTick>
 8000e56:	1e03      	subs	r3, r0, #0
 8000e58:	d050      	beq.n	8000efc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e122      	b.n	80010a4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d030      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e66:	4b72      	ldr	r3, [pc, #456]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a75      	ldr	r2, [pc, #468]	@ (8001040 <HAL_RCC_OscConfig+0x350>)
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	0019      	movs	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	691a      	ldr	r2, [r3, #16]
 8000e74:	4b6e      	ldr	r3, [pc, #440]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000e76:	430a      	orrs	r2, r1
 8000e78:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8000e7a:	4b6d      	ldr	r3, [pc, #436]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	4b6c      	ldr	r3, [pc, #432]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000e80:	2180      	movs	r1, #128	@ 0x80
 8000e82:	0049      	lsls	r1, r1, #1
 8000e84:	430a      	orrs	r2, r1
 8000e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e88:	f7ff fc7c 	bl	8000784 <HAL_GetTick>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e90:	e008      	b.n	8000ea4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000e92:	f7ff fc77 	bl	8000784 <HAL_GetTick>
 8000e96:	0002      	movs	r2, r0
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e0ff      	b.n	80010a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ea4:	4b62      	ldr	r3, [pc, #392]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	2380      	movs	r3, #128	@ 0x80
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	4013      	ands	r3, r2
 8000eae:	d0f0      	beq.n	8000e92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb0:	4b5f      	ldr	r3, [pc, #380]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	4a61      	ldr	r2, [pc, #388]	@ (800103c <HAL_RCC_OscConfig+0x34c>)
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	0019      	movs	r1, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	021a      	lsls	r2, r3, #8
 8000ec0:	4b5b      	ldr	r3, [pc, #364]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	e019      	b.n	8000efc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8000ec8:	4b59      	ldr	r3, [pc, #356]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b58      	ldr	r3, [pc, #352]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000ece:	4960      	ldr	r1, [pc, #384]	@ (8001050 <HAL_RCC_OscConfig+0x360>)
 8000ed0:	400a      	ands	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fc56 	bl	8000784 <HAL_GetTick>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000edc:	e008      	b.n	8000ef0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000ede:	f7ff fc51 	bl	8000784 <HAL_GetTick>
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e0d9      	b.n	80010a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ef0:	4b4f      	ldr	r3, [pc, #316]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	2380      	movs	r3, #128	@ 0x80
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d1f0      	bne.n	8000ede <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2208      	movs	r2, #8
 8000f02:	4013      	ands	r3, r2
 8000f04:	d042      	beq.n	8000f8c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000f06:	4b4a      	ldr	r3, [pc, #296]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2238      	movs	r2, #56	@ 0x38
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	2b18      	cmp	r3, #24
 8000f10:	d105      	bne.n	8000f1e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d138      	bne.n	8000f8c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e0c2      	b.n	80010a4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d019      	beq.n	8000f5a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000f26:	4b42      	ldr	r3, [pc, #264]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000f28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f2a:	4b41      	ldr	r3, [pc, #260]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f32:	f7ff fc27 	bl	8000784 <HAL_GetTick>
 8000f36:	0003      	movs	r3, r0
 8000f38:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fc22 	bl	8000784 <HAL_GetTick>
 8000f40:	0002      	movs	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e0aa      	b.n	80010a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000f4e:	4b38      	ldr	r3, [pc, #224]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f52:	2202      	movs	r2, #2
 8000f54:	4013      	ands	r3, r2
 8000f56:	d0f1      	beq.n	8000f3c <HAL_RCC_OscConfig+0x24c>
 8000f58:	e018      	b.n	8000f8c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000f5a:	4b35      	ldr	r3, [pc, #212]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000f5c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f5e:	4b34      	ldr	r3, [pc, #208]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000f60:	2101      	movs	r1, #1
 8000f62:	438a      	bics	r2, r1
 8000f64:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f66:	f7ff fc0d 	bl	8000784 <HAL_GetTick>
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000f70:	f7ff fc08 	bl	8000784 <HAL_GetTick>
 8000f74:	0002      	movs	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e090      	b.n	80010a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000f82:	4b2b      	ldr	r3, [pc, #172]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f86:	2202      	movs	r2, #2
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d1f1      	bne.n	8000f70 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2204      	movs	r2, #4
 8000f92:	4013      	ands	r3, r2
 8000f94:	d100      	bne.n	8000f98 <HAL_RCC_OscConfig+0x2a8>
 8000f96:	e084      	b.n	80010a2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f98:	230f      	movs	r3, #15
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000fa0:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	2238      	movs	r2, #56	@ 0x38
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2b20      	cmp	r3, #32
 8000faa:	d106      	bne.n	8000fba <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d000      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x2c6>
 8000fb4:	e075      	b.n	80010a2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e074      	b.n	80010a4 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d106      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x2e0>
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000fc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000fc8:	2101      	movs	r1, #1
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000fce:	e01c      	b.n	800100a <HAL_RCC_OscConfig+0x31a>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	2b05      	cmp	r3, #5
 8000fd6:	d10c      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x302>
 8000fd8:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000fda:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000fde:	2104      	movs	r1, #4
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000fe6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000fe8:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	430a      	orrs	r2, r1
 8000fee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000ff0:	e00b      	b.n	800100a <HAL_RCC_OscConfig+0x31a>
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000ff4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	438a      	bics	r2, r1
 8000ffc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8001000:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <HAL_RCC_OscConfig+0x340>)
 8001004:	2104      	movs	r1, #4
 8001006:	438a      	bics	r2, r1
 8001008:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d028      	beq.n	8001064 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001012:	f7ff fbb7 	bl	8000784 <HAL_GetTick>
 8001016:	0003      	movs	r3, r0
 8001018:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800101a:	e01d      	b.n	8001058 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800101c:	f7ff fbb2 	bl	8000784 <HAL_GetTick>
 8001020:	0002      	movs	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	4a0b      	ldr	r2, [pc, #44]	@ (8001054 <HAL_RCC_OscConfig+0x364>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d915      	bls.n	8001058 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e039      	b.n	80010a4 <HAL_RCC_OscConfig+0x3b4>
 8001030:	40021000 	.word	0x40021000
 8001034:	fffeffff 	.word	0xfffeffff
 8001038:	fffbffff 	.word	0xfffbffff
 800103c:	ffff80ff 	.word	0xffff80ff
 8001040:	ffffc7ff 	.word	0xffffc7ff
 8001044:	02dc6c00 	.word	0x02dc6c00
 8001048:	20000000 	.word	0x20000000
 800104c:	20000004 	.word	0x20000004
 8001050:	fffffeff 	.word	0xfffffeff
 8001054:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <HAL_RCC_OscConfig+0x3bc>)
 800105a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800105c:	2202      	movs	r2, #2
 800105e:	4013      	ands	r3, r2
 8001060:	d0dc      	beq.n	800101c <HAL_RCC_OscConfig+0x32c>
 8001062:	e013      	b.n	800108c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001064:	f7ff fb8e 	bl	8000784 <HAL_GetTick>
 8001068:	0003      	movs	r3, r0
 800106a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800106c:	e009      	b.n	8001082 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800106e:	f7ff fb89 	bl	8000784 <HAL_GetTick>
 8001072:	0002      	movs	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <HAL_RCC_OscConfig+0x3c0>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e010      	b.n	80010a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001082:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <HAL_RCC_OscConfig+0x3bc>)
 8001084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001086:	2202      	movs	r2, #2
 8001088:	4013      	ands	r3, r2
 800108a:	d1f0      	bne.n	800106e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800108c:	230f      	movs	r3, #15
 800108e:	18fb      	adds	r3, r7, r3
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d105      	bne.n	80010a2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001096:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <HAL_RCC_OscConfig+0x3bc>)
 8001098:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800109a:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <HAL_RCC_OscConfig+0x3bc>)
 800109c:	4905      	ldr	r1, [pc, #20]	@ (80010b4 <HAL_RCC_OscConfig+0x3c4>)
 800109e:	400a      	ands	r2, r1
 80010a0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b006      	add	sp, #24
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40021000 	.word	0x40021000
 80010b0:	00001388 	.word	0x00001388
 80010b4:	efffffff 	.word	0xefffffff

080010b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0df      	b.n	800128c <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010cc:	4b71      	ldr	r3, [pc, #452]	@ (8001294 <HAL_RCC_ClockConfig+0x1dc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2207      	movs	r2, #7
 80010d2:	4013      	ands	r3, r2
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d91e      	bls.n	8001118 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010da:	4b6e      	ldr	r3, [pc, #440]	@ (8001294 <HAL_RCC_ClockConfig+0x1dc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2207      	movs	r2, #7
 80010e0:	4393      	bics	r3, r2
 80010e2:	0019      	movs	r1, r3
 80010e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001294 <HAL_RCC_ClockConfig+0x1dc>)
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80010ec:	f7ff fb4a 	bl	8000784 <HAL_GetTick>
 80010f0:	0003      	movs	r3, r0
 80010f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010f4:	e009      	b.n	800110a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80010f6:	f7ff fb45 	bl	8000784 <HAL_GetTick>
 80010fa:	0002      	movs	r2, r0
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	4a65      	ldr	r2, [pc, #404]	@ (8001298 <HAL_RCC_ClockConfig+0x1e0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d901      	bls.n	800110a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e0c0      	b.n	800128c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800110a:	4b62      	ldr	r3, [pc, #392]	@ (8001294 <HAL_RCC_ClockConfig+0x1dc>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2207      	movs	r2, #7
 8001110:	4013      	ands	r3, r2
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d1ee      	bne.n	80010f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2202      	movs	r2, #2
 800111e:	4013      	ands	r3, r2
 8001120:	d017      	beq.n	8001152 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2204      	movs	r2, #4
 8001128:	4013      	ands	r3, r2
 800112a:	d008      	beq.n	800113e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800112c:	4b5b      	ldr	r3, [pc, #364]	@ (800129c <HAL_RCC_ClockConfig+0x1e4>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4a5b      	ldr	r2, [pc, #364]	@ (80012a0 <HAL_RCC_ClockConfig+0x1e8>)
 8001132:	401a      	ands	r2, r3
 8001134:	4b59      	ldr	r3, [pc, #356]	@ (800129c <HAL_RCC_ClockConfig+0x1e4>)
 8001136:	21b0      	movs	r1, #176	@ 0xb0
 8001138:	0109      	lsls	r1, r1, #4
 800113a:	430a      	orrs	r2, r1
 800113c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800113e:	4b57      	ldr	r3, [pc, #348]	@ (800129c <HAL_RCC_ClockConfig+0x1e4>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	4a58      	ldr	r2, [pc, #352]	@ (80012a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001144:	4013      	ands	r3, r2
 8001146:	0019      	movs	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	4b53      	ldr	r3, [pc, #332]	@ (800129c <HAL_RCC_ClockConfig+0x1e4>)
 800114e:	430a      	orrs	r2, r1
 8001150:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2201      	movs	r2, #1
 8001158:	4013      	ands	r3, r2
 800115a:	d04b      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d107      	bne.n	8001174 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001164:	4b4d      	ldr	r3, [pc, #308]	@ (800129c <HAL_RCC_ClockConfig+0x1e4>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	2380      	movs	r3, #128	@ 0x80
 800116a:	029b      	lsls	r3, r3, #10
 800116c:	4013      	ands	r3, r2
 800116e:	d11f      	bne.n	80011b0 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e08b      	b.n	800128c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d107      	bne.n	800118c <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800117c:	4b47      	ldr	r3, [pc, #284]	@ (800129c <HAL_RCC_ClockConfig+0x1e4>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2380      	movs	r3, #128	@ 0x80
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	4013      	ands	r3, r2
 8001186:	d113      	bne.n	80011b0 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e07f      	b.n	800128c <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b03      	cmp	r3, #3
 8001192:	d106      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001194:	4b41      	ldr	r3, [pc, #260]	@ (800129c <HAL_RCC_ClockConfig+0x1e4>)
 8001196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001198:	2202      	movs	r2, #2
 800119a:	4013      	ands	r3, r2
 800119c:	d108      	bne.n	80011b0 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e074      	b.n	800128c <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80011a2:	4b3e      	ldr	r3, [pc, #248]	@ (800129c <HAL_RCC_ClockConfig+0x1e4>)
 80011a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011a6:	2202      	movs	r2, #2
 80011a8:	4013      	ands	r3, r2
 80011aa:	d101      	bne.n	80011b0 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e06d      	b.n	800128c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80011b0:	4b3a      	ldr	r3, [pc, #232]	@ (800129c <HAL_RCC_ClockConfig+0x1e4>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2207      	movs	r2, #7
 80011b6:	4393      	bics	r3, r2
 80011b8:	0019      	movs	r1, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	4b37      	ldr	r3, [pc, #220]	@ (800129c <HAL_RCC_ClockConfig+0x1e4>)
 80011c0:	430a      	orrs	r2, r1
 80011c2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80011c4:	f7ff fade 	bl	8000784 <HAL_GetTick>
 80011c8:	0003      	movs	r3, r0
 80011ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011cc:	e009      	b.n	80011e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80011ce:	f7ff fad9 	bl	8000784 <HAL_GetTick>
 80011d2:	0002      	movs	r2, r0
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	4a2f      	ldr	r2, [pc, #188]	@ (8001298 <HAL_RCC_ClockConfig+0x1e0>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e054      	b.n	800128c <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e2:	4b2e      	ldr	r3, [pc, #184]	@ (800129c <HAL_RCC_ClockConfig+0x1e4>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2238      	movs	r2, #56	@ 0x38
 80011e8:	401a      	ands	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d1ec      	bne.n	80011ce <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011f4:	4b27      	ldr	r3, [pc, #156]	@ (8001294 <HAL_RCC_ClockConfig+0x1dc>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2207      	movs	r2, #7
 80011fa:	4013      	ands	r3, r2
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d21e      	bcs.n	8001240 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001202:	4b24      	ldr	r3, [pc, #144]	@ (8001294 <HAL_RCC_ClockConfig+0x1dc>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2207      	movs	r2, #7
 8001208:	4393      	bics	r3, r2
 800120a:	0019      	movs	r1, r3
 800120c:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <HAL_RCC_ClockConfig+0x1dc>)
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001214:	f7ff fab6 	bl	8000784 <HAL_GetTick>
 8001218:	0003      	movs	r3, r0
 800121a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800121c:	e009      	b.n	8001232 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800121e:	f7ff fab1 	bl	8000784 <HAL_GetTick>
 8001222:	0002      	movs	r2, r0
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	4a1b      	ldr	r2, [pc, #108]	@ (8001298 <HAL_RCC_ClockConfig+0x1e0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e02c      	b.n	800128c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001232:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <HAL_RCC_ClockConfig+0x1dc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2207      	movs	r2, #7
 8001238:	4013      	ands	r3, r2
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d1ee      	bne.n	800121e <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2204      	movs	r2, #4
 8001246:	4013      	ands	r3, r2
 8001248:	d009      	beq.n	800125e <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800124a:	4b14      	ldr	r3, [pc, #80]	@ (800129c <HAL_RCC_ClockConfig+0x1e4>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	4a16      	ldr	r2, [pc, #88]	@ (80012a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001250:	4013      	ands	r3, r2
 8001252:	0019      	movs	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <HAL_RCC_ClockConfig+0x1e4>)
 800125a:	430a      	orrs	r2, r1
 800125c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800125e:	f000 f82b 	bl	80012b8 <HAL_RCC_GetSysClockFreq>
 8001262:	0001      	movs	r1, r0
 8001264:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <HAL_RCC_ClockConfig+0x1e4>)
 8001266:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	220f      	movs	r2, #15
 800126c:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800126e:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <HAL_RCC_ClockConfig+0x1f4>)
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001274:	221f      	movs	r2, #31
 8001276:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001278:	000a      	movs	r2, r1
 800127a:	40da      	lsrs	r2, r3
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <HAL_RCC_ClockConfig+0x1f8>)
 800127e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <HAL_RCC_ClockConfig+0x1fc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff fa21 	bl	80006cc <HAL_InitTick>
 800128a:	0003      	movs	r3, r0
}
 800128c:	0018      	movs	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	b004      	add	sp, #16
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40022000 	.word	0x40022000
 8001298:	00001388 	.word	0x00001388
 800129c:	40021000 	.word	0x40021000
 80012a0:	ffff84ff 	.word	0xffff84ff
 80012a4:	fffff0ff 	.word	0xfffff0ff
 80012a8:	ffff8fff 	.word	0xffff8fff
 80012ac:	08001f90 	.word	0x08001f90
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000004 	.word	0x20000004

080012b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80012be:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <HAL_RCC_GetSysClockFreq+0x78>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2238      	movs	r2, #56	@ 0x38
 80012c4:	4013      	ands	r3, r2
 80012c6:	d10f      	bne.n	80012e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80012c8:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <HAL_RCC_GetSysClockFreq+0x78>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	0adb      	lsrs	r3, r3, #11
 80012ce:	2207      	movs	r2, #7
 80012d0:	4013      	ands	r3, r2
 80012d2:	2201      	movs	r2, #1
 80012d4:	409a      	lsls	r2, r3
 80012d6:	0013      	movs	r3, r2
 80012d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	4815      	ldr	r0, [pc, #84]	@ (8001334 <HAL_RCC_GetSysClockFreq+0x7c>)
 80012de:	f7fe ff13 	bl	8000108 <__udivsi3>
 80012e2:	0003      	movs	r3, r0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	e01e      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80012e8:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <HAL_RCC_GetSysClockFreq+0x78>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2238      	movs	r2, #56	@ 0x38
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d102      	bne.n	80012fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <HAL_RCC_GetSysClockFreq+0x7c>)
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	e015      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80012fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001330 <HAL_RCC_GetSysClockFreq+0x78>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2238      	movs	r2, #56	@ 0x38
 8001300:	4013      	ands	r3, r2
 8001302:	2b20      	cmp	r3, #32
 8001304:	d103      	bne.n	800130e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001306:	2380      	movs	r3, #128	@ 0x80
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	e00b      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800130e:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <HAL_RCC_GetSysClockFreq+0x78>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2238      	movs	r2, #56	@ 0x38
 8001314:	4013      	ands	r3, r2
 8001316:	2b18      	cmp	r3, #24
 8001318:	d103      	bne.n	8001322 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800131a:	23fa      	movs	r3, #250	@ 0xfa
 800131c:	01db      	lsls	r3, r3, #7
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	e001      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001326:	687b      	ldr	r3, [r7, #4]
}
 8001328:	0018      	movs	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40021000 	.word	0x40021000
 8001334:	02dc6c00 	.word	0x02dc6c00

08001338 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800133c:	f7ff ffbc 	bl	80012b8 <HAL_RCC_GetSysClockFreq>
 8001340:	0001      	movs	r1, r0
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <HAL_RCC_GetHCLKFreq+0x30>)
 8001344:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001346:	0a1b      	lsrs	r3, r3, #8
 8001348:	220f      	movs	r2, #15
 800134a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800134c:	4b07      	ldr	r3, [pc, #28]	@ (800136c <HAL_RCC_GetHCLKFreq+0x34>)
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001352:	221f      	movs	r2, #31
 8001354:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001356:	000a      	movs	r2, r1
 8001358:	40da      	lsrs	r2, r3
 800135a:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <HAL_RCC_GetHCLKFreq+0x38>)
 800135c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800135e:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <HAL_RCC_GetHCLKFreq+0x38>)
 8001360:	681b      	ldr	r3, [r3, #0]
}
 8001362:	0018      	movs	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021000 	.word	0x40021000
 800136c:	08001f90 	.word	0x08001f90
 8001370:	20000000 	.word	0x20000000

08001374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001378:	f7ff ffde 	bl	8001338 <HAL_RCC_GetHCLKFreq>
 800137c:	0001      	movs	r1, r0
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	0b1b      	lsrs	r3, r3, #12
 8001384:	2207      	movs	r2, #7
 8001386:	401a      	ands	r2, r3
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	58d3      	ldr	r3, [r2, r3]
 800138e:	221f      	movs	r2, #31
 8001390:	4013      	ands	r3, r2
 8001392:	40d9      	lsrs	r1, r3
 8001394:	000b      	movs	r3, r1
}
 8001396:	0018      	movs	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000
 80013a0:	08001fd0 	.word	0x08001fd0

080013a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e046      	b.n	8001444 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2288      	movs	r2, #136	@ 0x88
 80013ba:	589b      	ldr	r3, [r3, r2]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d107      	bne.n	80013d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2284      	movs	r2, #132	@ 0x84
 80013c4:	2100      	movs	r1, #0
 80013c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	0018      	movs	r0, r3
 80013cc:	f7ff f8c4 	bl	8000558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2288      	movs	r2, #136	@ 0x88
 80013d4:	2124      	movs	r1, #36	@ 0x24
 80013d6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2101      	movs	r1, #1
 80013e4:	438a      	bics	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	0018      	movs	r0, r3
 80013f4:	f000 fb34 	bl	8001a60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	0018      	movs	r0, r3
 80013fc:	f000 f9b2 	bl	8001764 <UART_SetConfig>
 8001400:	0003      	movs	r3, r0
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e01c      	b.n	8001444 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	490d      	ldr	r1, [pc, #52]	@ (800144c <HAL_UART_Init+0xa8>)
 8001416:	400a      	ands	r2, r1
 8001418:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	212a      	movs	r1, #42	@ 0x2a
 8001426:	438a      	bics	r2, r1
 8001428:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2101      	movs	r1, #1
 8001436:	430a      	orrs	r2, r1
 8001438:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	0018      	movs	r0, r3
 800143e:	f000 fbc3 	bl	8001bc8 <UART_CheckIdleState>
 8001442:	0003      	movs	r3, r0
}
 8001444:	0018      	movs	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	b002      	add	sp, #8
 800144a:	bd80      	pop	{r7, pc}
 800144c:	ffffb7ff 	.word	0xffffb7ff

08001450 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	@ 0x28
 8001454:	af02      	add	r7, sp, #8
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	1dbb      	adds	r3, r7, #6
 800145e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2288      	movs	r2, #136	@ 0x88
 8001464:	589b      	ldr	r3, [r3, r2]
 8001466:	2b20      	cmp	r3, #32
 8001468:	d000      	beq.n	800146c <HAL_UART_Transmit+0x1c>
 800146a:	e090      	b.n	800158e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_UART_Transmit+0x2a>
 8001472:	1dbb      	adds	r3, r7, #6
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e088      	b.n	8001590 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	2380      	movs	r3, #128	@ 0x80
 8001484:	015b      	lsls	r3, r3, #5
 8001486:	429a      	cmp	r2, r3
 8001488:	d109      	bne.n	800149e <HAL_UART_Transmit+0x4e>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d105      	bne.n	800149e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	2201      	movs	r2, #1
 8001496:	4013      	ands	r3, r2
 8001498:	d001      	beq.n	800149e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e078      	b.n	8001590 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2290      	movs	r2, #144	@ 0x90
 80014a2:	2100      	movs	r1, #0
 80014a4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2288      	movs	r2, #136	@ 0x88
 80014aa:	2121      	movs	r1, #33	@ 0x21
 80014ac:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80014ae:	f7ff f969 	bl	8000784 <HAL_GetTick>
 80014b2:	0003      	movs	r3, r0
 80014b4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1dba      	adds	r2, r7, #6
 80014ba:	2154      	movs	r1, #84	@ 0x54
 80014bc:	8812      	ldrh	r2, [r2, #0]
 80014be:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	1dba      	adds	r2, r7, #6
 80014c4:	2156      	movs	r1, #86	@ 0x56
 80014c6:	8812      	ldrh	r2, [r2, #0]
 80014c8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	2380      	movs	r3, #128	@ 0x80
 80014d0:	015b      	lsls	r3, r3, #5
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d108      	bne.n	80014e8 <HAL_UART_Transmit+0x98>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d104      	bne.n	80014e8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	e003      	b.n	80014f0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80014f0:	e030      	b.n	8001554 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	0013      	movs	r3, r2
 80014fc:	2200      	movs	r2, #0
 80014fe:	2180      	movs	r1, #128	@ 0x80
 8001500:	f000 fc0c 	bl	8001d1c <UART_WaitOnFlagUntilTimeout>
 8001504:	1e03      	subs	r3, r0, #0
 8001506:	d005      	beq.n	8001514 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2288      	movs	r2, #136	@ 0x88
 800150c:	2120      	movs	r1, #32
 800150e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e03d      	b.n	8001590 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10b      	bne.n	8001532 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	001a      	movs	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	05d2      	lsls	r2, r2, #23
 8001526:	0dd2      	lsrs	r2, r2, #23
 8001528:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	3302      	adds	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	e007      	b.n	8001542 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	3301      	adds	r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2256      	movs	r2, #86	@ 0x56
 8001546:	5a9b      	ldrh	r3, [r3, r2]
 8001548:	b29b      	uxth	r3, r3
 800154a:	3b01      	subs	r3, #1
 800154c:	b299      	uxth	r1, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2256      	movs	r2, #86	@ 0x56
 8001552:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2256      	movs	r2, #86	@ 0x56
 8001558:	5a9b      	ldrh	r3, [r3, r2]
 800155a:	b29b      	uxth	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1c8      	bne.n	80014f2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	0013      	movs	r3, r2
 800156a:	2200      	movs	r2, #0
 800156c:	2140      	movs	r1, #64	@ 0x40
 800156e:	f000 fbd5 	bl	8001d1c <UART_WaitOnFlagUntilTimeout>
 8001572:	1e03      	subs	r3, r0, #0
 8001574:	d005      	beq.n	8001582 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2288      	movs	r2, #136	@ 0x88
 800157a:	2120      	movs	r1, #32
 800157c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e006      	b.n	8001590 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2288      	movs	r2, #136	@ 0x88
 8001586:	2120      	movs	r1, #32
 8001588:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	e000      	b.n	8001590 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800158e:	2302      	movs	r3, #2
  }
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	b008      	add	sp, #32
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af02      	add	r7, sp, #8
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	1dbb      	adds	r3, r7, #6
 80015a6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	228c      	movs	r2, #140	@ 0x8c
 80015ac:	589b      	ldr	r3, [r3, r2]
 80015ae:	2b20      	cmp	r3, #32
 80015b0:	d000      	beq.n	80015b4 <HAL_UART_Receive+0x1c>
 80015b2:	e0d0      	b.n	8001756 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_UART_Receive+0x2a>
 80015ba:	1dbb      	adds	r3, r7, #6
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0c8      	b.n	8001758 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	2380      	movs	r3, #128	@ 0x80
 80015cc:	015b      	lsls	r3, r3, #5
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d109      	bne.n	80015e6 <HAL_UART_Receive+0x4e>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d105      	bne.n	80015e6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	2201      	movs	r2, #1
 80015de:	4013      	ands	r3, r2
 80015e0:	d001      	beq.n	80015e6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0b8      	b.n	8001758 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2290      	movs	r2, #144	@ 0x90
 80015ea:	2100      	movs	r1, #0
 80015ec:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	228c      	movs	r2, #140	@ 0x8c
 80015f2:	2122      	movs	r1, #34	@ 0x22
 80015f4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80015fc:	f7ff f8c2 	bl	8000784 <HAL_GetTick>
 8001600:	0003      	movs	r3, r0
 8001602:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1dba      	adds	r2, r7, #6
 8001608:	215c      	movs	r1, #92	@ 0x5c
 800160a:	8812      	ldrh	r2, [r2, #0]
 800160c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	1dba      	adds	r2, r7, #6
 8001612:	215e      	movs	r1, #94	@ 0x5e
 8001614:	8812      	ldrh	r2, [r2, #0]
 8001616:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	2380      	movs	r3, #128	@ 0x80
 800161e:	015b      	lsls	r3, r3, #5
 8001620:	429a      	cmp	r2, r3
 8001622:	d10d      	bne.n	8001640 <HAL_UART_Receive+0xa8>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d104      	bne.n	8001636 <HAL_UART_Receive+0x9e>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2260      	movs	r2, #96	@ 0x60
 8001630:	494b      	ldr	r1, [pc, #300]	@ (8001760 <HAL_UART_Receive+0x1c8>)
 8001632:	5299      	strh	r1, [r3, r2]
 8001634:	e02e      	b.n	8001694 <HAL_UART_Receive+0xfc>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2260      	movs	r2, #96	@ 0x60
 800163a:	21ff      	movs	r1, #255	@ 0xff
 800163c:	5299      	strh	r1, [r3, r2]
 800163e:	e029      	b.n	8001694 <HAL_UART_Receive+0xfc>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10d      	bne.n	8001664 <HAL_UART_Receive+0xcc>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d104      	bne.n	800165a <HAL_UART_Receive+0xc2>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2260      	movs	r2, #96	@ 0x60
 8001654:	21ff      	movs	r1, #255	@ 0xff
 8001656:	5299      	strh	r1, [r3, r2]
 8001658:	e01c      	b.n	8001694 <HAL_UART_Receive+0xfc>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2260      	movs	r2, #96	@ 0x60
 800165e:	217f      	movs	r1, #127	@ 0x7f
 8001660:	5299      	strh	r1, [r3, r2]
 8001662:	e017      	b.n	8001694 <HAL_UART_Receive+0xfc>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	2380      	movs	r3, #128	@ 0x80
 800166a:	055b      	lsls	r3, r3, #21
 800166c:	429a      	cmp	r2, r3
 800166e:	d10d      	bne.n	800168c <HAL_UART_Receive+0xf4>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d104      	bne.n	8001682 <HAL_UART_Receive+0xea>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2260      	movs	r2, #96	@ 0x60
 800167c:	217f      	movs	r1, #127	@ 0x7f
 800167e:	5299      	strh	r1, [r3, r2]
 8001680:	e008      	b.n	8001694 <HAL_UART_Receive+0xfc>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2260      	movs	r2, #96	@ 0x60
 8001686:	213f      	movs	r1, #63	@ 0x3f
 8001688:	5299      	strh	r1, [r3, r2]
 800168a:	e003      	b.n	8001694 <HAL_UART_Receive+0xfc>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2260      	movs	r2, #96	@ 0x60
 8001690:	2100      	movs	r1, #0
 8001692:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001694:	2312      	movs	r3, #18
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	2160      	movs	r1, #96	@ 0x60
 800169c:	5a52      	ldrh	r2, [r2, r1]
 800169e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	2380      	movs	r3, #128	@ 0x80
 80016a6:	015b      	lsls	r3, r3, #5
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d108      	bne.n	80016be <HAL_UART_Receive+0x126>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d104      	bne.n	80016be <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	e003      	b.n	80016c6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80016c6:	e03a      	b.n	800173e <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	0013      	movs	r3, r2
 80016d2:	2200      	movs	r2, #0
 80016d4:	2120      	movs	r1, #32
 80016d6:	f000 fb21 	bl	8001d1c <UART_WaitOnFlagUntilTimeout>
 80016da:	1e03      	subs	r3, r0, #0
 80016dc:	d005      	beq.n	80016ea <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	228c      	movs	r2, #140	@ 0x8c
 80016e2:	2120      	movs	r1, #32
 80016e4:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e036      	b.n	8001758 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10e      	bne.n	800170e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	2212      	movs	r2, #18
 80016fa:	18ba      	adds	r2, r7, r2
 80016fc:	8812      	ldrh	r2, [r2, #0]
 80016fe:	4013      	ands	r3, r2
 8001700:	b29a      	uxth	r2, r3
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	3302      	adds	r3, #2
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	e00e      	b.n	800172c <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2212      	movs	r2, #18
 8001718:	18ba      	adds	r2, r7, r2
 800171a:	8812      	ldrh	r2, [r2, #0]
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	4013      	ands	r3, r2
 8001720:	b2da      	uxtb	r2, r3
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3301      	adds	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	225e      	movs	r2, #94	@ 0x5e
 8001730:	5a9b      	ldrh	r3, [r3, r2]
 8001732:	b29b      	uxth	r3, r3
 8001734:	3b01      	subs	r3, #1
 8001736:	b299      	uxth	r1, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	225e      	movs	r2, #94	@ 0x5e
 800173c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	225e      	movs	r2, #94	@ 0x5e
 8001742:	5a9b      	ldrh	r3, [r3, r2]
 8001744:	b29b      	uxth	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1be      	bne.n	80016c8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	228c      	movs	r2, #140	@ 0x8c
 800174e:	2120      	movs	r1, #32
 8001750:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e000      	b.n	8001758 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8001756:	2302      	movs	r3, #2
  }
}
 8001758:	0018      	movs	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	b008      	add	sp, #32
 800175e:	bd80      	pop	{r7, pc}
 8001760:	000001ff 	.word	0x000001ff

08001764 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800176c:	231e      	movs	r3, #30
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	4313      	orrs	r3, r2
 800178a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4aab      	ldr	r2, [pc, #684]	@ (8001a40 <UART_SetConfig+0x2dc>)
 8001794:	4013      	ands	r3, r2
 8001796:	0019      	movs	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	430a      	orrs	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	4aa6      	ldr	r2, [pc, #664]	@ (8001a44 <UART_SetConfig+0x2e0>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	0019      	movs	r1, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a9d      	ldr	r2, [pc, #628]	@ (8001a48 <UART_SetConfig+0x2e4>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	430a      	orrs	r2, r1
 80017de:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e6:	220f      	movs	r2, #15
 80017e8:	4393      	bics	r3, r2
 80017ea:	0019      	movs	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a93      	ldr	r2, [pc, #588]	@ (8001a4c <UART_SetConfig+0x2e8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d127      	bne.n	8001852 <UART_SetConfig+0xee>
 8001802:	4b93      	ldr	r3, [pc, #588]	@ (8001a50 <UART_SetConfig+0x2ec>)
 8001804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001806:	2203      	movs	r2, #3
 8001808:	4013      	ands	r3, r2
 800180a:	2b03      	cmp	r3, #3
 800180c:	d017      	beq.n	800183e <UART_SetConfig+0xda>
 800180e:	d81b      	bhi.n	8001848 <UART_SetConfig+0xe4>
 8001810:	2b02      	cmp	r3, #2
 8001812:	d00a      	beq.n	800182a <UART_SetConfig+0xc6>
 8001814:	d818      	bhi.n	8001848 <UART_SetConfig+0xe4>
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <UART_SetConfig+0xbc>
 800181a:	2b01      	cmp	r3, #1
 800181c:	d00a      	beq.n	8001834 <UART_SetConfig+0xd0>
 800181e:	e013      	b.n	8001848 <UART_SetConfig+0xe4>
 8001820:	231f      	movs	r3, #31
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	e021      	b.n	800186e <UART_SetConfig+0x10a>
 800182a:	231f      	movs	r3, #31
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	2202      	movs	r2, #2
 8001830:	701a      	strb	r2, [r3, #0]
 8001832:	e01c      	b.n	800186e <UART_SetConfig+0x10a>
 8001834:	231f      	movs	r3, #31
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	2204      	movs	r2, #4
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	e017      	b.n	800186e <UART_SetConfig+0x10a>
 800183e:	231f      	movs	r3, #31
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	2208      	movs	r2, #8
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	e012      	b.n	800186e <UART_SetConfig+0x10a>
 8001848:	231f      	movs	r3, #31
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	2210      	movs	r2, #16
 800184e:	701a      	strb	r2, [r3, #0]
 8001850:	e00d      	b.n	800186e <UART_SetConfig+0x10a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a7f      	ldr	r2, [pc, #508]	@ (8001a54 <UART_SetConfig+0x2f0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d104      	bne.n	8001866 <UART_SetConfig+0x102>
 800185c:	231f      	movs	r3, #31
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	e003      	b.n	800186e <UART_SetConfig+0x10a>
 8001866:	231f      	movs	r3, #31
 8001868:	18fb      	adds	r3, r7, r3
 800186a:	2210      	movs	r2, #16
 800186c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69da      	ldr	r2, [r3, #28]
 8001872:	2380      	movs	r3, #128	@ 0x80
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	429a      	cmp	r2, r3
 8001878:	d000      	beq.n	800187c <UART_SetConfig+0x118>
 800187a:	e06f      	b.n	800195c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800187c:	231f      	movs	r3, #31
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b08      	cmp	r3, #8
 8001884:	d01f      	beq.n	80018c6 <UART_SetConfig+0x162>
 8001886:	dc22      	bgt.n	80018ce <UART_SetConfig+0x16a>
 8001888:	2b04      	cmp	r3, #4
 800188a:	d017      	beq.n	80018bc <UART_SetConfig+0x158>
 800188c:	dc1f      	bgt.n	80018ce <UART_SetConfig+0x16a>
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <UART_SetConfig+0x134>
 8001892:	2b02      	cmp	r3, #2
 8001894:	d005      	beq.n	80018a2 <UART_SetConfig+0x13e>
 8001896:	e01a      	b.n	80018ce <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001898:	f7ff fd6c 	bl	8001374 <HAL_RCC_GetPCLK1Freq>
 800189c:	0003      	movs	r3, r0
 800189e:	61bb      	str	r3, [r7, #24]
        break;
 80018a0:	e01c      	b.n	80018dc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80018a2:	4b6b      	ldr	r3, [pc, #428]	@ (8001a50 <UART_SetConfig+0x2ec>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	2207      	movs	r2, #7
 80018aa:	4013      	ands	r3, r2
 80018ac:	3301      	adds	r3, #1
 80018ae:	0019      	movs	r1, r3
 80018b0:	4869      	ldr	r0, [pc, #420]	@ (8001a58 <UART_SetConfig+0x2f4>)
 80018b2:	f7fe fc29 	bl	8000108 <__udivsi3>
 80018b6:	0003      	movs	r3, r0
 80018b8:	61bb      	str	r3, [r7, #24]
        break;
 80018ba:	e00f      	b.n	80018dc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80018bc:	f7ff fcfc 	bl	80012b8 <HAL_RCC_GetSysClockFreq>
 80018c0:	0003      	movs	r3, r0
 80018c2:	61bb      	str	r3, [r7, #24]
        break;
 80018c4:	e00a      	b.n	80018dc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80018c6:	2380      	movs	r3, #128	@ 0x80
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	61bb      	str	r3, [r7, #24]
        break;
 80018cc:	e006      	b.n	80018dc <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80018d2:	231e      	movs	r3, #30
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
        break;
 80018da:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d100      	bne.n	80018e4 <UART_SetConfig+0x180>
 80018e2:	e097      	b.n	8001a14 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018e8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a5c <UART_SetConfig+0x2f8>)
 80018ea:	0052      	lsls	r2, r2, #1
 80018ec:	5ad3      	ldrh	r3, [r2, r3]
 80018ee:	0019      	movs	r1, r3
 80018f0:	69b8      	ldr	r0, [r7, #24]
 80018f2:	f7fe fc09 	bl	8000108 <__udivsi3>
 80018f6:	0003      	movs	r3, r0
 80018f8:	005a      	lsls	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	085b      	lsrs	r3, r3, #1
 8001900:	18d2      	adds	r2, r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	0019      	movs	r1, r3
 8001908:	0010      	movs	r0, r2
 800190a:	f7fe fbfd 	bl	8000108 <__udivsi3>
 800190e:	0003      	movs	r3, r0
 8001910:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	2b0f      	cmp	r3, #15
 8001916:	d91c      	bls.n	8001952 <UART_SetConfig+0x1ee>
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	2380      	movs	r3, #128	@ 0x80
 800191c:	025b      	lsls	r3, r3, #9
 800191e:	429a      	cmp	r2, r3
 8001920:	d217      	bcs.n	8001952 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	b29a      	uxth	r2, r3
 8001926:	200e      	movs	r0, #14
 8001928:	183b      	adds	r3, r7, r0
 800192a:	210f      	movs	r1, #15
 800192c:	438a      	bics	r2, r1
 800192e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	085b      	lsrs	r3, r3, #1
 8001934:	b29b      	uxth	r3, r3
 8001936:	2207      	movs	r2, #7
 8001938:	4013      	ands	r3, r2
 800193a:	b299      	uxth	r1, r3
 800193c:	183b      	adds	r3, r7, r0
 800193e:	183a      	adds	r2, r7, r0
 8001940:	8812      	ldrh	r2, [r2, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	183a      	adds	r2, r7, r0
 800194c:	8812      	ldrh	r2, [r2, #0]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	e060      	b.n	8001a14 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8001952:	231e      	movs	r3, #30
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	e05b      	b.n	8001a14 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800195c:	231f      	movs	r3, #31
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b08      	cmp	r3, #8
 8001964:	d01f      	beq.n	80019a6 <UART_SetConfig+0x242>
 8001966:	dc22      	bgt.n	80019ae <UART_SetConfig+0x24a>
 8001968:	2b04      	cmp	r3, #4
 800196a:	d017      	beq.n	800199c <UART_SetConfig+0x238>
 800196c:	dc1f      	bgt.n	80019ae <UART_SetConfig+0x24a>
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <UART_SetConfig+0x214>
 8001972:	2b02      	cmp	r3, #2
 8001974:	d005      	beq.n	8001982 <UART_SetConfig+0x21e>
 8001976:	e01a      	b.n	80019ae <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001978:	f7ff fcfc 	bl	8001374 <HAL_RCC_GetPCLK1Freq>
 800197c:	0003      	movs	r3, r0
 800197e:	61bb      	str	r3, [r7, #24]
        break;
 8001980:	e01c      	b.n	80019bc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001982:	4b33      	ldr	r3, [pc, #204]	@ (8001a50 <UART_SetConfig+0x2ec>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2207      	movs	r2, #7
 800198a:	4013      	ands	r3, r2
 800198c:	3301      	adds	r3, #1
 800198e:	0019      	movs	r1, r3
 8001990:	4831      	ldr	r0, [pc, #196]	@ (8001a58 <UART_SetConfig+0x2f4>)
 8001992:	f7fe fbb9 	bl	8000108 <__udivsi3>
 8001996:	0003      	movs	r3, r0
 8001998:	61bb      	str	r3, [r7, #24]
        break;
 800199a:	e00f      	b.n	80019bc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800199c:	f7ff fc8c 	bl	80012b8 <HAL_RCC_GetSysClockFreq>
 80019a0:	0003      	movs	r3, r0
 80019a2:	61bb      	str	r3, [r7, #24]
        break;
 80019a4:	e00a      	b.n	80019bc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80019a6:	2380      	movs	r3, #128	@ 0x80
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	61bb      	str	r3, [r7, #24]
        break;
 80019ac:	e006      	b.n	80019bc <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80019b2:	231e      	movs	r3, #30
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
        break;
 80019ba:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d028      	beq.n	8001a14 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019c6:	4b25      	ldr	r3, [pc, #148]	@ (8001a5c <UART_SetConfig+0x2f8>)
 80019c8:	0052      	lsls	r2, r2, #1
 80019ca:	5ad3      	ldrh	r3, [r2, r3]
 80019cc:	0019      	movs	r1, r3
 80019ce:	69b8      	ldr	r0, [r7, #24]
 80019d0:	f7fe fb9a 	bl	8000108 <__udivsi3>
 80019d4:	0003      	movs	r3, r0
 80019d6:	001a      	movs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	085b      	lsrs	r3, r3, #1
 80019de:	18d2      	adds	r2, r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	0019      	movs	r1, r3
 80019e6:	0010      	movs	r0, r2
 80019e8:	f7fe fb8e 	bl	8000108 <__udivsi3>
 80019ec:	0003      	movs	r3, r0
 80019ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	2b0f      	cmp	r3, #15
 80019f4:	d90a      	bls.n	8001a0c <UART_SetConfig+0x2a8>
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	2380      	movs	r3, #128	@ 0x80
 80019fa:	025b      	lsls	r3, r3, #9
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d205      	bcs.n	8001a0c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	e003      	b.n	8001a14 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8001a0c:	231e      	movs	r3, #30
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	226a      	movs	r2, #106	@ 0x6a
 8001a18:	2101      	movs	r1, #1
 8001a1a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2268      	movs	r2, #104	@ 0x68
 8001a20:	2101      	movs	r1, #1
 8001a22:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8001a30:	231e      	movs	r3, #30
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	781b      	ldrb	r3, [r3, #0]
}
 8001a36:	0018      	movs	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b008      	add	sp, #32
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			@ (mov r8, r8)
 8001a40:	cfff69f3 	.word	0xcfff69f3
 8001a44:	ffffcfff 	.word	0xffffcfff
 8001a48:	11fff4ff 	.word	0x11fff4ff
 8001a4c:	40013800 	.word	0x40013800
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40004400 	.word	0x40004400
 8001a58:	02dc6c00 	.word	0x02dc6c00
 8001a5c:	08001ff0 	.word	0x08001ff0

08001a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d00b      	beq.n	8001a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4a4a      	ldr	r2, [pc, #296]	@ (8001ba4 <UART_AdvFeatureConfig+0x144>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	0019      	movs	r1, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4013      	ands	r3, r2
 8001a92:	d00b      	beq.n	8001aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4a43      	ldr	r2, [pc, #268]	@ (8001ba8 <UART_AdvFeatureConfig+0x148>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d00b      	beq.n	8001ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4a3b      	ldr	r2, [pc, #236]	@ (8001bac <UART_AdvFeatureConfig+0x14c>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d00b      	beq.n	8001af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	4a34      	ldr	r2, [pc, #208]	@ (8001bb0 <UART_AdvFeatureConfig+0x150>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af4:	2210      	movs	r2, #16
 8001af6:	4013      	ands	r3, r2
 8001af8:	d00b      	beq.n	8001b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb4 <UART_AdvFeatureConfig+0x154>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	0019      	movs	r1, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b16:	2220      	movs	r2, #32
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d00b      	beq.n	8001b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	4a25      	ldr	r2, [pc, #148]	@ (8001bb8 <UART_AdvFeatureConfig+0x158>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	0019      	movs	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b38:	2240      	movs	r2, #64	@ 0x40
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d01d      	beq.n	8001b7a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4a1d      	ldr	r2, [pc, #116]	@ (8001bbc <UART_AdvFeatureConfig+0x15c>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	0019      	movs	r1, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b5a:	2380      	movs	r3, #128	@ 0x80
 8001b5c:	035b      	lsls	r3, r3, #13
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d10b      	bne.n	8001b7a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	4a15      	ldr	r2, [pc, #84]	@ (8001bc0 <UART_AdvFeatureConfig+0x160>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7e:	2280      	movs	r2, #128	@ 0x80
 8001b80:	4013      	ands	r3, r2
 8001b82:	d00b      	beq.n	8001b9c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc4 <UART_AdvFeatureConfig+0x164>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	0019      	movs	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	605a      	str	r2, [r3, #4]
  }
}
 8001b9c:	46c0      	nop			@ (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b002      	add	sp, #8
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	ffff7fff 	.word	0xffff7fff
 8001ba8:	fffdffff 	.word	0xfffdffff
 8001bac:	fffeffff 	.word	0xfffeffff
 8001bb0:	fffbffff 	.word	0xfffbffff
 8001bb4:	ffffefff 	.word	0xffffefff
 8001bb8:	ffffdfff 	.word	0xffffdfff
 8001bbc:	ffefffff 	.word	0xffefffff
 8001bc0:	ff9fffff 	.word	0xff9fffff
 8001bc4:	fff7ffff 	.word	0xfff7ffff

08001bc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b092      	sub	sp, #72	@ 0x48
 8001bcc:	af02      	add	r7, sp, #8
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2290      	movs	r2, #144	@ 0x90
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001bd8:	f7fe fdd4 	bl	8000784 <HAL_GetTick>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2208      	movs	r2, #8
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d12d      	bne.n	8001c4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bf0:	2280      	movs	r2, #128	@ 0x80
 8001bf2:	0391      	lsls	r1, r2, #14
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4a47      	ldr	r2, [pc, #284]	@ (8001d14 <UART_CheckIdleState+0x14c>)
 8001bf8:	9200      	str	r2, [sp, #0]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f000 f88e 	bl	8001d1c <UART_WaitOnFlagUntilTimeout>
 8001c00:	1e03      	subs	r3, r0, #0
 8001c02:	d022      	beq.n	8001c4a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001c04:	f3ef 8310 	mrs	r3, PRIMASK
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8001c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c0e:	2301      	movs	r3, #1
 8001c10:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c14:	f383 8810 	msr	PRIMASK, r3
}
 8001c18:	46c0      	nop			@ (mov r8, r8)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2180      	movs	r1, #128	@ 0x80
 8001c26:	438a      	bics	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c30:	f383 8810 	msr	PRIMASK, r3
}
 8001c34:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2288      	movs	r2, #136	@ 0x88
 8001c3a:	2120      	movs	r1, #32
 8001c3c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2284      	movs	r2, #132	@ 0x84
 8001c42:	2100      	movs	r1, #0
 8001c44:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e060      	b.n	8001d0c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2204      	movs	r2, #4
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d146      	bne.n	8001ce6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c5a:	2280      	movs	r2, #128	@ 0x80
 8001c5c:	03d1      	lsls	r1, r2, #15
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	4a2c      	ldr	r2, [pc, #176]	@ (8001d14 <UART_CheckIdleState+0x14c>)
 8001c62:	9200      	str	r2, [sp, #0]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f000 f859 	bl	8001d1c <UART_WaitOnFlagUntilTimeout>
 8001c6a:	1e03      	subs	r3, r0, #0
 8001c6c:	d03b      	beq.n	8001ce6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8001c72:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c74:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c78:	2301      	movs	r3, #1
 8001c7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f383 8810 	msr	PRIMASK, r3
}
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4922      	ldr	r1, [pc, #136]	@ (8001d18 <UART_CheckIdleState+0x150>)
 8001c90:	400a      	ands	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f383 8810 	msr	PRIMASK, r3
}
 8001c9e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8001ca4:	61bb      	str	r3, [r7, #24]
  return(result);
 8001ca6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001caa:	2301      	movs	r3, #1
 8001cac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f383 8810 	msr	PRIMASK, r3
}
 8001cb4:	46c0      	nop			@ (mov r8, r8)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	438a      	bics	r2, r1
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cc8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	f383 8810 	msr	PRIMASK, r3
}
 8001cd0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	228c      	movs	r2, #140	@ 0x8c
 8001cd6:	2120      	movs	r1, #32
 8001cd8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2284      	movs	r2, #132	@ 0x84
 8001cde:	2100      	movs	r1, #0
 8001ce0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e012      	b.n	8001d0c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2288      	movs	r2, #136	@ 0x88
 8001cea:	2120      	movs	r1, #32
 8001cec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	228c      	movs	r2, #140	@ 0x8c
 8001cf2:	2120      	movs	r1, #32
 8001cf4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2284      	movs	r2, #132	@ 0x84
 8001d06:	2100      	movs	r1, #0
 8001d08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b010      	add	sp, #64	@ 0x40
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	01ffffff 	.word	0x01ffffff
 8001d18:	fffffedf 	.word	0xfffffedf

08001d1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	1dfb      	adds	r3, r7, #7
 8001d2a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d2c:	e051      	b.n	8001dd2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	3301      	adds	r3, #1
 8001d32:	d04e      	beq.n	8001dd2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d34:	f7fe fd26 	bl	8000784 <HAL_GetTick>
 8001d38:	0002      	movs	r2, r0
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d302      	bcc.n	8001d4a <UART_WaitOnFlagUntilTimeout+0x2e>
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e051      	b.n	8001df2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2204      	movs	r2, #4
 8001d56:	4013      	ands	r3, r2
 8001d58:	d03b      	beq.n	8001dd2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b80      	cmp	r3, #128	@ 0x80
 8001d5e:	d038      	beq.n	8001dd2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b40      	cmp	r3, #64	@ 0x40
 8001d64:	d035      	beq.n	8001dd2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d111      	bne.n	8001d98 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2208      	movs	r2, #8
 8001d7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f000 f83c 	bl	8001dfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2290      	movs	r2, #144	@ 0x90
 8001d88:	2108      	movs	r1, #8
 8001d8a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2284      	movs	r2, #132	@ 0x84
 8001d90:	2100      	movs	r1, #0
 8001d92:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e02c      	b.n	8001df2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	69da      	ldr	r2, [r3, #28]
 8001d9e:	2380      	movs	r3, #128	@ 0x80
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	401a      	ands	r2, r3
 8001da4:	2380      	movs	r3, #128	@ 0x80
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d112      	bne.n	8001dd2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2280      	movs	r2, #128	@ 0x80
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f000 f81f 	bl	8001dfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2290      	movs	r2, #144	@ 0x90
 8001dc2:	2120      	movs	r1, #32
 8001dc4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2284      	movs	r2, #132	@ 0x84
 8001dca:	2100      	movs	r1, #0
 8001dcc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e00f      	b.n	8001df2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	425a      	negs	r2, r3
 8001de2:	4153      	adcs	r3, r2
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	001a      	movs	r2, r3
 8001de8:	1dfb      	adds	r3, r7, #7
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d09e      	beq.n	8001d2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b004      	add	sp, #16
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08e      	sub	sp, #56	@ 0x38
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001e04:	f3ef 8310 	mrs	r3, PRIMASK
 8001e08:	617b      	str	r3, [r7, #20]
  return(result);
 8001e0a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e0e:	2301      	movs	r3, #1
 8001e10:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f383 8810 	msr	PRIMASK, r3
}
 8001e18:	46c0      	nop			@ (mov r8, r8)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4926      	ldr	r1, [pc, #152]	@ (8001ec0 <UART_EndRxTransfer+0xc4>)
 8001e26:	400a      	ands	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f383 8810 	msr	PRIMASK, r3
}
 8001e34:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001e36:	f3ef 8310 	mrs	r3, PRIMASK
 8001e3a:	623b      	str	r3, [r7, #32]
  return(result);
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001e3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e40:	2301      	movs	r3, #1
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e46:	f383 8810 	msr	PRIMASK, r3
}
 8001e4a:	46c0      	nop			@ (mov r8, r8)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	491b      	ldr	r1, [pc, #108]	@ (8001ec4 <UART_EndRxTransfer+0xc8>)
 8001e58:	400a      	ands	r2, r1
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e62:	f383 8810 	msr	PRIMASK, r3
}
 8001e66:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d118      	bne.n	8001ea2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001e70:	f3ef 8310 	mrs	r3, PRIMASK
 8001e74:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e76:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f383 8810 	msr	PRIMASK, r3
}
 8001e84:	46c0      	nop			@ (mov r8, r8)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2110      	movs	r1, #16
 8001e92:	438a      	bics	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	f383 8810 	msr	PRIMASK, r3
}
 8001ea0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	228c      	movs	r2, #140	@ 0x8c
 8001ea6:	2120      	movs	r1, #32
 8001ea8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8001eb6:	46c0      	nop			@ (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b00e      	add	sp, #56	@ 0x38
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	46c0      	nop			@ (mov r8, r8)
 8001ec0:	fffffedf 	.word	0xfffffedf
 8001ec4:	effffffe 	.word	0xeffffffe

08001ec8 <memset>:
 8001ec8:	0003      	movs	r3, r0
 8001eca:	1882      	adds	r2, r0, r2
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d100      	bne.n	8001ed2 <memset+0xa>
 8001ed0:	4770      	bx	lr
 8001ed2:	7019      	strb	r1, [r3, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	e7f9      	b.n	8001ecc <memset+0x4>

08001ed8 <__libc_init_array>:
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	2600      	movs	r6, #0
 8001edc:	4c0c      	ldr	r4, [pc, #48]	@ (8001f10 <__libc_init_array+0x38>)
 8001ede:	4d0d      	ldr	r5, [pc, #52]	@ (8001f14 <__libc_init_array+0x3c>)
 8001ee0:	1b64      	subs	r4, r4, r5
 8001ee2:	10a4      	asrs	r4, r4, #2
 8001ee4:	42a6      	cmp	r6, r4
 8001ee6:	d109      	bne.n	8001efc <__libc_init_array+0x24>
 8001ee8:	2600      	movs	r6, #0
 8001eea:	f000 f823 	bl	8001f34 <_init>
 8001eee:	4c0a      	ldr	r4, [pc, #40]	@ (8001f18 <__libc_init_array+0x40>)
 8001ef0:	4d0a      	ldr	r5, [pc, #40]	@ (8001f1c <__libc_init_array+0x44>)
 8001ef2:	1b64      	subs	r4, r4, r5
 8001ef4:	10a4      	asrs	r4, r4, #2
 8001ef6:	42a6      	cmp	r6, r4
 8001ef8:	d105      	bne.n	8001f06 <__libc_init_array+0x2e>
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
 8001efc:	00b3      	lsls	r3, r6, #2
 8001efe:	58eb      	ldr	r3, [r5, r3]
 8001f00:	4798      	blx	r3
 8001f02:	3601      	adds	r6, #1
 8001f04:	e7ee      	b.n	8001ee4 <__libc_init_array+0xc>
 8001f06:	00b3      	lsls	r3, r6, #2
 8001f08:	58eb      	ldr	r3, [r5, r3]
 8001f0a:	4798      	blx	r3
 8001f0c:	3601      	adds	r6, #1
 8001f0e:	e7f2      	b.n	8001ef6 <__libc_init_array+0x1e>
 8001f10:	08002008 	.word	0x08002008
 8001f14:	08002008 	.word	0x08002008
 8001f18:	0800200c 	.word	0x0800200c
 8001f1c:	08002008 	.word	0x08002008

08001f20 <memcpy>:
 8001f20:	2300      	movs	r3, #0
 8001f22:	b510      	push	{r4, lr}
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d100      	bne.n	8001f2a <memcpy+0xa>
 8001f28:	bd10      	pop	{r4, pc}
 8001f2a:	5ccc      	ldrb	r4, [r1, r3]
 8001f2c:	54c4      	strb	r4, [r0, r3]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	e7f8      	b.n	8001f24 <memcpy+0x4>
	...

08001f34 <_init>:
 8001f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f3a:	bc08      	pop	{r3}
 8001f3c:	469e      	mov	lr, r3
 8001f3e:	4770      	bx	lr

08001f40 <_fini>:
 8001f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f42:	46c0      	nop			@ (mov r8, r8)
 8001f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f46:	bc08      	pop	{r3}
 8001f48:	469e      	mov	lr, r3
 8001f4a:	4770      	bx	lr
